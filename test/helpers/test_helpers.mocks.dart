// Mocks generated by Mockito 5.4.4 from annotations
// in biot/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i15;
import 'dart:convert' as _i27;
import 'dart:io' as _i17;
import 'dart:typed_data' as _i28;
import 'dart:ui' as _i6;

import 'package:biot/constants/amputation_info.dart' as _i35;
import 'package:biot/constants/compass_lead_enum.dart' as _i33;
import 'package:biot/constants/enum.dart' as _i26;
import 'package:biot/constants/sex_at_birth.dart' as _i34;
import 'package:biot/model/amputation.dart' as _i9;
import 'package:biot/model/condition.dart' as _i30;
import 'package:biot/model/domain.dart' as _i32;
import 'package:biot/model/domain_weight_distribution.dart' as _i8;
import 'package:biot/model/encounter.dart' as _i29;
import 'package:biot/model/encounter_collection.dart' as _i7;
import 'package:biot/model/episode_of_care.dart' as _i12;
import 'package:biot/model/kLevel.dart' as _i31;
import 'package:biot/model/outcome_measure_collection.dart' as _i19;
import 'package:biot/model/outcome_measure_info.dart' as _i2;
import 'package:biot/model/outcome_measures/outcome_measure.dart' as _i5;
import 'package:biot/model/patient.dart' as _i14;
import 'package:biot/model/pre_post_episode_of_care.dart' as _i11;
import 'package:biot/model/question_collection.dart' as _i3;
import 'package:biot/model/socket_info.dart' as _i10;
import 'package:biot/services/analytics_service.dart' as _i52;
import 'package:biot/services/app_locale_service.dart' as _i50;
import 'package:biot/services/cloud_service.dart' as _i38;
import 'package:biot/services/database_service.dart' as _i42;
import 'package:biot/services/file_saver_service.dart' as _i49;
import 'package:biot/services/file_service.dart' as _i45;
import 'package:biot/services/logger_service.dart' as _i51;
import 'package:biot/services/outcome_measure_load_service.dart' as _i47;
import 'package:biot/services/outcome_measure_selection_service.dart' as _i46;
import 'package:biot/services/package_info_service.dart' as _i44;
import 'package:biot/services/pdf_service.dart' as _i48;
import 'package:biot/services/shared_preferences_service.dart' as _i43;
import 'package:biot/ui/views/amputation_form/amputation_form_viewmodel.dart'
    as _i36;
import 'package:biot/ui/views/patient/patient_viewmodel.dart' as _i39;
import 'package:firebase_analytics/firebase_analytics.dart' as _i24;
import 'package:flutter/material.dart' as _i13;
import 'package:hive/hive.dart' as _i16;
import 'package:hive/src/box/default_compaction_strategy.dart' as _i41;
import 'package:hive/src/box/default_key_comparator.dart' as _i40;
import 'package:http/http.dart' as _i4;
import 'package:intl/intl.dart' as _i20;
import 'package:logger/logger.dart' as _i23;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i25;
import 'package:pdf_merger/pdf_merger.dart' as _i21;
import 'package:share_plus/share_plus.dart' as _i22;
import 'package:stacked/stacked.dart' as _i18;
import 'package:stacked_services/stacked_services.dart' as _i37;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOutcomeMeasureInfo_0 extends _i1.SmartFake
    implements _i2.OutcomeMeasureInfo {
  _FakeOutcomeMeasureInfo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuestionCollection_1 extends _i1.SmartFake
    implements _i3.QuestionCollection {
  _FakeQuestionCollection_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_2 extends _i1.SmartFake implements _i4.Response {
  _FakeResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_3 extends _i1.SmartFake
    implements _i4.StreamedResponse {
  _FakeStreamedResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOutcomeMeasure_4 extends _i1.SmartFake
    implements _i5.OutcomeMeasure {
  _FakeOutcomeMeasure_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColor_5 extends _i1.SmartFake implements _i6.Color {
  _FakeColor_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEncounterCollection_6 extends _i1.SmartFake
    implements _i7.EncounterCollection {
  _FakeEncounterCollection_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDomainWeightDistribution_7 extends _i1.SmartFake
    implements _i8.DomainWeightDistribution {
  _FakeDomainWeightDistribution_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAmputation_8 extends _i1.SmartFake implements _i9.Amputation {
  _FakeAmputation_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSocketInfo_9 extends _i1.SmartFake implements _i10.SocketInfo {
  _FakeSocketInfo_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePrePostEpisodeOfCare_10 extends _i1.SmartFake
    implements _i11.PrePostEpisodeOfCare {
  _FakePrePostEpisodeOfCare_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEpisodeOfCare_11 extends _i1.SmartFake
    implements _i12.EpisodeOfCare {
  _FakeEpisodeOfCare_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGlobalKey_12<T extends _i13.State<_i13.StatefulWidget>>
    extends _i1.SmartFake implements _i13.GlobalKey<T> {
  _FakeGlobalKey_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePatient_13 extends _i1.SmartFake implements _i14.Patient {
  _FakePatient_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_14<T1> extends _i1.SmartFake implements _i15.Future<T1> {
  _FakeFuture_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBox_15<E> extends _i1.SmartFake implements _i16.Box<E> {
  _FakeBox_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLazyBox_16<E1> extends _i1.SmartFake implements _i16.LazyBox<E1> {
  _FakeLazyBox_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_17 extends _i1.SmartFake implements _i4.Client {
  _FakeClient_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFile_18 extends _i1.SmartFake implements _i17.File {
  _FakeFile_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveValue_19<T> extends _i1.SmartFake
    implements _i18.ReactiveValue<T> {
  _FakeReactiveValue_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOutcomeMeasureCollection_20 extends _i1.SmartFake
    implements _i19.OutcomeMeasureCollection {
  _FakeOutcomeMeasureCollection_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNumberFormat_21 extends _i1.SmartFake implements _i20.NumberFormat {
  _FakeNumberFormat_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMergeMultiplePDFResponse_22 extends _i1.SmartFake
    implements _i21.MergeMultiplePDFResponse {
  _FakeMergeMultiplePDFResponse_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeShareResult_23 extends _i1.SmartFake implements _i22.ShareResult {
  _FakeShareResult_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocale_24 extends _i1.SmartFake implements _i6.Locale {
  _FakeLocale_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogger_25 extends _i1.SmartFake implements _i23.Logger {
  _FakeLogger_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAnalyticsObserver_26 extends _i1.SmartFake
    implements _i24.FirebaseAnalyticsObserver {
  _FakeFirebaseAnalyticsObserver_26(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OutcomeMeasure].
///
/// See the documentation for Mockito's code generation for more information.
class MockOutcomeMeasure extends _i1.Mock implements _i5.OutcomeMeasure {
  MockOutcomeMeasure() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.OutcomeMeasureInfo get info => (super.noSuchMethod(
        Invocation.getter(#info),
        returnValue: _FakeOutcomeMeasureInfo_0(
          this,
          Invocation.getter(#info),
        ),
      ) as _i2.OutcomeMeasureInfo);

  @override
  set info(_i2.OutcomeMeasureInfo? _info) => super.noSuchMethod(
        Invocation.setter(
          #info,
          _info,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i26.DomainType get domainType => (super.noSuchMethod(
        Invocation.getter(#domainType),
        returnValue: _i26.DomainType.comfort,
      ) as _i26.DomainType);

  @override
  set domainType(_i26.DomainType? _domainType) => super.noSuchMethod(
        Invocation.setter(
          #domainType,
          _domainType,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get estTimeToComplete => (super.noSuchMethod(
        Invocation.getter(#estTimeToComplete),
        returnValue: 0,
      ) as int);

  @override
  set estTimeToComplete(int? _estTimeToComplete) => super.noSuchMethod(
        Invocation.setter(
          #estTimeToComplete,
          _estTimeToComplete,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isAssistantNeeded => (super.noSuchMethod(
        Invocation.getter(#isAssistantNeeded),
        returnValue: false,
      ) as bool);

  @override
  set isAssistantNeeded(bool? _isAssistantNeeded) => super.noSuchMethod(
        Invocation.setter(
          #isAssistantNeeded,
          _isAssistantNeeded,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tags(List<dynamic>? _tags) => super.noSuchMethod(
        Invocation.setter(
          #tags,
          _tags,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<dynamic> get supportedLocale => (super.noSuchMethod(
        Invocation.getter(#supportedLocale),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  set supportedLocale(List<dynamic>? _supportedLocale) => super.noSuchMethod(
        Invocation.setter(
          #supportedLocale,
          _supportedLocale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set familyName(String? _familyName) => super.noSuchMethod(
        Invocation.setter(
          #familyName,
          _familyName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set familyShortName(String? _familyShortName) => super.noSuchMethod(
        Invocation.setter(
          #familyShortName,
          _familyShortName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set entityId(String? _entityId) => super.noSuchMethod(
        Invocation.setter(
          #entityId,
          _entityId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set templateId(String? _templateId) => super.noSuchMethod(
        Invocation.setter(
          #templateId,
          _templateId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set creationTime(DateTime? _creationTime) => super.noSuchMethod(
        Invocation.setter(
          #creationTime,
          _creationTime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set patientId(String? _patientId) => super.noSuchMethod(
        Invocation.setter(
          #patientId,
          _patientId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set sessionId(String? _sessionId) => super.noSuchMethod(
        Invocation.setter(
          #sessionId,
          _sessionId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set index(int? _index) => super.noSuchMethod(
        Invocation.setter(
          #index,
          _index,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get rawValue => (super.noSuchMethod(
        Invocation.getter(#rawValue),
        returnValue: 0.0,
      ) as double);

  @override
  set rawValue(double? _rawValue) => super.noSuchMethod(
        Invocation.setter(
          #rawValue,
          _rawValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set summaryDataToBeModified(
          List<Map<String, String>>? _summaryDataToBeModified) =>
      super.noSuchMethod(
        Invocation.setter(
          #summaryDataToBeModified,
          _summaryDataToBeModified,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isPopulated => (super.noSuchMethod(
        Invocation.getter(#isPopulated),
        returnValue: false,
      ) as bool);

  @override
  set isPopulated(bool? _isPopulated) => super.noSuchMethod(
        Invocation.setter(
          #isPopulated,
          _isPopulated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get numOfGraph => (super.noSuchMethod(
        Invocation.getter(#numOfGraph),
        returnValue: 0,
      ) as int);

  @override
  set numOfGraph(int? _numOfGraph) => super.noSuchMethod(
        Invocation.setter(
          #numOfGraph,
          _numOfGraph,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isSelected => (super.noSuchMethod(
        Invocation.getter(#isSelected),
        returnValue: false,
      ) as bool);

  @override
  set isSelected(bool? _isSelected) => super.noSuchMethod(
        Invocation.setter(
          #isSelected,
          _isSelected,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.QuestionCollection get questionCollection => (super.noSuchMethod(
        Invocation.getter(#questionCollection),
        returnValue: _FakeQuestionCollection_1(
          this,
          Invocation.getter(#questionCollection),
        ),
      ) as _i3.QuestionCollection);

  @override
  set questionCollection(_i3.QuestionCollection? _questionCollection) =>
      super.noSuchMethod(
        Invocation.setter(
          #questionCollection,
          _questionCollection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set data(Map<String, dynamic>? _data) => super.noSuchMethod(
        Invocation.setter(
          #data,
          _data,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set encounterCreatedTimeString(String? _encounterCreatedTimeString) =>
      super.noSuchMethod(
        Invocation.setter(
          #encounterCreatedTimeString,
          _encounterCreatedTimeString,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set outcomeMeasureCreatedTimeString(
          String? _outcomeMeasureCreatedTimeString) =>
      super.noSuchMethod(
        Invocation.setter(
          #outcomeMeasureCreatedTimeString,
          _outcomeMeasureCreatedTimeString,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get timeToComplete => (super.noSuchMethod(
        Invocation.getter(#timeToComplete),
        returnValue: 0,
      ) as int);

  @override
  set timeToComplete(int? _timeToComplete) => super.noSuchMethod(
        Invocation.setter(
          #timeToComplete,
          _timeToComplete,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get rawName => (super.noSuchMethod(
        Invocation.getter(#rawName),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#rawName),
        ),
      ) as String);

  @override
  String get rawShortName => (super.noSuchMethod(
        Invocation.getter(#rawShortName),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#rawShortName),
        ),
      ) as String);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  String get shortName => (super.noSuchMethod(
        Invocation.getter(#shortName),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#shortName),
        ),
      ) as String);

  @override
  String get chartYAxisTitle => (super.noSuchMethod(
        Invocation.getter(#chartYAxisTitle),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#chartYAxisTitle),
        ),
      ) as String);

  @override
  String get currentTime => (super.noSuchMethod(
        Invocation.getter(#currentTime),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#currentTime),
        ),
      ) as String);

  @override
  bool get isComplete => (super.noSuchMethod(
        Invocation.getter(#isComplete),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> get totalScore => (super.noSuchMethod(
        Invocation.getter(#totalScore),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void copyOutcomeMeasureTemplateData() => super.noSuchMethod(
        Invocation.method(
          #copyOutcomeMeasureTemplateData,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool canProceed() => (super.noSuchMethod(
        Invocation.method(
          #canProceed,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void started() => super.noSuchMethod(
        Invocation.method(
          #started,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void completed() => super.noSuchMethod(
        Invocation.method(
          #completed,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<void> build({bool? shouldLocalize = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
          {#shouldLocalize: shouldLocalize},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<dynamic> buildInfo() => (super.noSuchMethod(
        Invocation.method(
          #buildInfo,
          [],
        ),
        returnValue: _i15.Future<dynamic>.value(),
      ) as _i15.Future<dynamic>);

  @override
  _i15.Future<void> buildQuestions({bool? shouldLocalize = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildQuestions,
          [],
          {#shouldLocalize: shouldLocalize},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  void populateWithJson(Map<String, dynamic>? json) => super.noSuchMethod(
        Invocation.method(
          #populateWithJson,
          [json],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String getSummaryScoreTitle(int? index) => (super.noSuchMethod(
        Invocation.method(
          #getSummaryScoreTitle,
          [index],
        ),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.method(
            #getSummaryScoreTitle,
            [index],
          ),
        ),
      ) as String);

  @override
  Map<String, dynamic> toJson(
    String? ownerOrganizationId,
    _i14.Patient? patient,
    int? index,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [
            ownerOrganizationId,
            patient,
            index,
          ],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> exportResponses(String? locale) => (super.noSuchMethod(
        Invocation.method(
          #exportResponses,
          [locale],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i4.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.Future<_i4.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i15.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i15.Future<_i4.Response>);

  @override
  _i15.Future<_i4.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i15.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i15.Future<_i4.Response>);

  @override
  _i15.Future<_i4.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i27.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i15.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i15.Future<_i4.Response>);

  @override
  _i15.Future<_i4.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i27.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i15.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i15.Future<_i4.Response>);

  @override
  _i15.Future<_i4.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i27.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i15.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i15.Future<_i4.Response>);

  @override
  _i15.Future<_i4.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i27.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i15.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i15.Future<_i4.Response>);

  @override
  _i15.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i15.Future<String>.value(_i25.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i15.Future<String>);

  @override
  _i15.Future<_i28.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i15.Future<_i28.Uint8List>.value(_i28.Uint8List(0)),
      ) as _i15.Future<_i28.Uint8List>);

  @override
  _i15.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i15.Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_3(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i15.Future<_i4.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Encounter].
///
/// See the documentation for Mockito's code generation for more information.
class MockEncounter extends _i1.Mock implements _i29.Encounter {
  MockEncounter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set entityId(String? _entityId) => super.noSuchMethod(
        Invocation.setter(
          #entityId,
          _entityId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set name(String? _name) => super.noSuchMethod(
        Invocation.setter(
          #name,
          _name,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set creationTimeString(String? _creationTimeString) => super.noSuchMethod(
        Invocation.setter(
          #creationTimeString,
          _creationTimeString,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set outcomeMeasures(List<_i5.OutcomeMeasure>? _outcomeMeasures) =>
      super.noSuchMethod(
        Invocation.setter(
          #outcomeMeasures,
          _outcomeMeasures,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set domainWeightDistId(String? _domainWeightDistId) => super.noSuchMethod(
        Invocation.setter(
          #domainWeightDistId,
          _domainWeightDistId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set domainWeightDist(_i8.DomainWeightDistribution? _domainWeightDist) =>
      super.noSuchMethod(
        Invocation.setter(
          #domainWeightDist,
          _domainWeightDist,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set unweightedTotalScore(num? _unweightedTotalScore) => super.noSuchMethod(
        Invocation.setter(
          #unweightedTotalScore,
          _unweightedTotalScore,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set conditionId(String? _conditionId) => super.noSuchMethod(
        Invocation.setter(
          #conditionId,
          _conditionId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set condition(_i30.Condition? _condition) => super.noSuchMethod(
        Invocation.setter(
          #condition,
          _condition,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set kLevelId(String? _kLevelId) => super.noSuchMethod(
        Invocation.setter(
          #kLevelId,
          _kLevelId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set kLevel(_i31.KLevel? _kLevel) => super.noSuchMethod(
        Invocation.setter(
          #kLevel,
          _kLevel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set domainScoresId(String? _domainScoresId) => super.noSuchMethod(
        Invocation.setter(
          #domainScoresId,
          _domainScoresId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set encounterCreatedTimeString(String? _encounterCreatedTimeString) =>
      super.noSuchMethod(
        Invocation.setter(
          #encounterCreatedTimeString,
          _encounterCreatedTimeString,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<_i26.DomainType, _i32.Domain> get domainsMap => (super.noSuchMethod(
        Invocation.getter(#domainsMap),
        returnValue: <_i26.DomainType, _i32.Domain>{},
      ) as Map<_i26.DomainType, _i32.Domain>);

  @override
  set domainsMap(Map<_i26.DomainType, _i32.Domain>? _domainsMap) =>
      super.noSuchMethod(
        Invocation.setter(
          #domainsMap,
          _domainsMap,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isPopulated => (super.noSuchMethod(
        Invocation.getter(#isPopulated),
        returnValue: false,
      ) as bool);

  @override
  set isPopulated(bool? _isPopulated) => super.noSuchMethod(
        Invocation.setter(
          #isPopulated,
          _isPopulated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set episodeOfCare(_i12.EpisodeOfCare? _episodeOfCare) => super.noSuchMethod(
        Invocation.setter(
          #episodeOfCare,
          _episodeOfCare,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set prePostEpisodeOfCare(_i11.PrePostEpisodeOfCare? _prePostEpisodeOfCare) =>
      super.noSuchMethod(
        Invocation.setter(
          #prePostEpisodeOfCare,
          _prePostEpisodeOfCare,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set prefix(_i33.EpisodePrefix? _prefix) => super.noSuchMethod(
        Invocation.setter(
          #prefix,
          _prefix,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set preEncounter(_i29.Encounter? _preEncounter) => super.noSuchMethod(
        Invocation.setter(
          #preEncounter,
          _preEncounter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set submitCode(_i33.Submit? _submitCode) => super.noSuchMethod(
        Invocation.setter(
          #submitCode,
          _submitCode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set weightedTotalScore(double? value) => super.noSuchMethod(
        Invocation.setter(
          #weightedTotalScore,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i32.Domain> get domains => (super.noSuchMethod(
        Invocation.getter(#domains),
        returnValue: <_i32.Domain>[],
      ) as List<_i32.Domain>);

  @override
  set domains(List<_i32.Domain>? domainList) => super.noSuchMethod(
        Invocation.setter(
          #domains,
          domainList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<_i26.DomainType, List<_i5.OutcomeMeasure>> get outcomeMeasuresByDomains =>
      (super.noSuchMethod(
        Invocation.getter(#outcomeMeasuresByDomains),
        returnValue: <_i26.DomainType, List<_i5.OutcomeMeasure>>{},
      ) as Map<_i26.DomainType, List<_i5.OutcomeMeasure>>);

  @override
  bool get isInBox => (super.noSuchMethod(
        Invocation.getter(#isInBox),
        returnValue: false,
      ) as bool);

  @override
  String generateUniqueEntityInstanceNameWithPatient(
    _i14.Patient? patient,
    String? entity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateUniqueEntityInstanceNameWithPatient,
          [
            patient,
            entity,
          ],
        ),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.method(
            #generateUniqueEntityInstanceNameWithPatient,
            [
              patient,
              entity,
            ],
          ),
        ),
      ) as String);

  @override
  Map<String, dynamic> toJson(_i14.Patient? patient) => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [patient],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i5.OutcomeMeasure getOutcomeMeasureTemplate(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOutcomeMeasureTemplate,
          [id],
        ),
        returnValue: _FakeOutcomeMeasure_4(
          this,
          Invocation.method(
            #getOutcomeMeasureTemplate,
            [id],
          ),
        ),
      ) as _i5.OutcomeMeasure);

  @override
  void calculateScore() => super.noSuchMethod(
        Invocation.method(
          #calculateScore,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addOutcomeMeasure(_i5.OutcomeMeasure? om) => super.noSuchMethod(
        Invocation.method(
          #addOutcomeMeasure,
          [om],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeOutcomeMeasure(_i5.OutcomeMeasure? om) => super.noSuchMethod(
        Invocation.method(
          #removeOutcomeMeasure,
          [om],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i32.Domain> sortDomainListByPatientDomainWeightDistribution(
          List<_i26.DomainType>? domainTypes) =>
      (super.noSuchMethod(
        Invocation.method(
          #sortDomainListByPatientDomainWeightDistribution,
          [domainTypes],
        ),
        returnValue: <_i32.Domain>[],
      ) as List<_i32.Domain>);

  @override
  double calculateUnweightedTotalScore() => (super.noSuchMethod(
        Invocation.method(
          #calculateUnweightedTotalScore,
          [],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  double calculateWeightedTotalScore(
          _i8.DomainWeightDistribution? domainWeightDist) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateWeightedTotalScore,
          [domainWeightDist],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  _i6.Color lighten(
    _i6.Color? c, [
    int? percent = 10,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #lighten,
          [
            c,
            percent,
          ],
        ),
        returnValue: _FakeColor_5(
          this,
          Invocation.method(
            #lighten,
            [
              c,
              percent,
            ],
          ),
        ),
      ) as _i6.Color);

  @override
  _i15.Future<void> save() => (super.noSuchMethod(
        Invocation.method(
          #save,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
}

/// A class which mocks [Patient].
///
/// See the documentation for Mockito's code generation for more information.
class MockPatient extends _i1.Mock implements _i14.Patient {
  MockPatient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get firstName => (super.noSuchMethod(
        Invocation.getter(#firstName),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#firstName),
        ),
      ) as String);

  @override
  set firstName(String? _firstName) => super.noSuchMethod(
        Invocation.setter(
          #firstName,
          _firstName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get lastName => (super.noSuchMethod(
        Invocation.getter(#lastName),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#lastName),
        ),
      ) as String);

  @override
  set lastName(String? _lastName) => super.noSuchMethod(
        Invocation.setter(
          #lastName,
          _lastName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get email => (super.noSuchMethod(
        Invocation.getter(#email),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#email),
        ),
      ) as String);

  @override
  set sexAtBirthIndex(int? _sexAtBirthIndex) => super.noSuchMethod(
        Invocation.setter(
          #sexAtBirthIndex,
          _sexAtBirthIndex,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set caregiverName(String? _caregiverName) => super.noSuchMethod(
        Invocation.setter(
          #caregiverName,
          _caregiverName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isSetToDelete(bool? _isSetToDelete) => super.noSuchMethod(
        Invocation.setter(
          #isSetToDelete,
          _isSetToDelete,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set encounters(List<_i29.Encounter>? _encounters) => super.noSuchMethod(
        Invocation.setter(
          #encounters,
          _encounters,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set domainWeightDistJson(String? _domainWeightDistJson) => super.noSuchMethod(
        Invocation.setter(
          #domainWeightDistJson,
          _domainWeightDistJson,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set entityId(String? _entityId) => super.noSuchMethod(
        Invocation.setter(
          #entityId,
          _entityId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set dob(DateTime? _dob) => super.noSuchMethod(
        Invocation.setter(
          #dob,
          _dob,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set currentSex(int? _currentSex) => super.noSuchMethod(
        Invocation.setter(
          #currentSex,
          _currentSex,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set race(int? _race) => super.noSuchMethod(
        Invocation.setter(
          #race,
          _race,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set ethnicity(int? _ethnicity) => super.noSuchMethod(
        Invocation.setter(
          #ethnicity,
          _ethnicity,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set conditionJson(String? _conditionJson) => super.noSuchMethod(
        Invocation.setter(
          #conditionJson,
          _conditionJson,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set kLevelJson(String? _kLevelJson) => super.noSuchMethod(
        Invocation.setter(
          #kLevelJson,
          _kLevelJson,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set outcomeMeasures(List<String?>? _outcomeMeasures) => super.noSuchMethod(
        Invocation.setter(
          #outcomeMeasures,
          _outcomeMeasures,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set creationTime(DateTime? _creationTime) => super.noSuchMethod(
        Invocation.setter(
          #creationTime,
          _creationTime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.EncounterCollection get encounterCollection => (super.noSuchMethod(
        Invocation.getter(#encounterCollection),
        returnValue: _FakeEncounterCollection_6(
          this,
          Invocation.getter(#encounterCollection),
        ),
      ) as _i7.EncounterCollection);

  @override
  set encounterCollection(_i7.EncounterCollection? _encounterCollection) =>
      super.noSuchMethod(
        Invocation.setter(
          #encounterCollection,
          _encounterCollection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set countryCode(String? _countryCode) => super.noSuchMethod(
        Invocation.setter(
          #countryCode,
          _countryCode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i9.Amputation> get amputations => (super.noSuchMethod(
        Invocation.getter(#amputations),
        returnValue: <_i9.Amputation>[],
      ) as List<_i9.Amputation>);

  @override
  set amputations(List<_i9.Amputation>? _amputations) => super.noSuchMethod(
        Invocation.setter(
          #amputations,
          _amputations,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isPopulated => (super.noSuchMethod(
        Invocation.getter(#isPopulated),
        returnValue: false,
      ) as bool);

  @override
  set isPopulated(bool? _isPopulated) => super.noSuchMethod(
        Invocation.setter(
          #isPopulated,
          _isPopulated,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLead => (super.noSuchMethod(
        Invocation.getter(#isLead),
        returnValue: false,
      ) as bool);

  @override
  set isLead(bool? _isLead) => super.noSuchMethod(
        Invocation.setter(
          #isLead,
          _isLead,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i34.SexAtBirth get sexAtBirth => (super.noSuchMethod(
        Invocation.getter(#sexAtBirth),
        returnValue: _i34.SexAtBirth.male,
      ) as _i34.SexAtBirth);

  @override
  String get initial => (super.noSuchMethod(
        Invocation.getter(#initial),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#initial),
        ),
      ) as String);

  @override
  _i8.DomainWeightDistribution get domainWeightDist => (super.noSuchMethod(
        Invocation.getter(#domainWeightDist),
        returnValue: _FakeDomainWeightDistribution_7(
          this,
          Invocation.getter(#domainWeightDist),
        ),
      ) as _i8.DomainWeightDistribution);

  @override
  set domainWeightDist(
          _i8.DomainWeightDistribution? domainWeightDistribution) =>
      super.noSuchMethod(
        Invocation.setter(
          #domainWeightDist,
          domainWeightDistribution,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set condition(_i30.Condition? condition) => super.noSuchMethod(
        Invocation.setter(
          #condition,
          condition,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set kLevel(_i31.KLevel? kLevel) => super.noSuchMethod(
        Invocation.setter(
          #kLevel,
          kLevel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isInBox => (super.noSuchMethod(
        Invocation.getter(#isInBox),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i15.Future<dynamic> populate() => (super.noSuchMethod(
        Invocation.method(
          #populate,
          [],
        ),
        returnValue: _i15.Future<dynamic>.value(),
      ) as _i15.Future<dynamic>);

  @override
  Map<String, dynamic> toJsonForPDF() => (super.noSuchMethod(
        Invocation.method(
          #toJsonForPDF,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i15.Future<void> save() => (super.noSuchMethod(
        Invocation.method(
          #save,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
}

/// A class which mocks [DomainWeightDistribution].
///
/// See the documentation for Mockito's code generation for more information.
class MockDomainWeightDistribution extends _i1.Mock
    implements _i8.DomainWeightDistribution {
  MockDomainWeightDistribution() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set entityId(String? _entityId) => super.noSuchMethod(
        Invocation.setter(
          #entityId,
          _entityId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set community(num? _community) => super.noSuchMethod(
        Invocation.setter(
          #community,
          _community,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set function(num? _function) => super.noSuchMethod(
        Invocation.setter(
          #function,
          _function,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set goals(num? _goals) => super.noSuchMethod(
        Invocation.setter(
          #goals,
          _goals,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set comfort(num? _comfort) => super.noSuchMethod(
        Invocation.setter(
          #comfort,
          _comfort,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set satisfaction(num? _satisfaction) => super.noSuchMethod(
        Invocation.setter(
          #satisfaction,
          _satisfaction,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i26.DomainType> get domainSortedByWeight => (super.noSuchMethod(
        Invocation.getter(#domainSortedByWeight),
        returnValue: <_i26.DomainType>[],
      ) as List<_i26.DomainType>);

  @override
  num getDomainWeightValue(_i26.DomainType? type) => (super.noSuchMethod(
        Invocation.method(
          #getDomainWeightValue,
          [type],
        ),
        returnValue: 0,
      ) as num);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Condition].
///
/// See the documentation for Mockito's code generation for more information.
class MockCondition extends _i1.Mock implements _i30.Condition {
  MockCondition() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set entityId(String? _entityId) => super.noSuchMethod(
        Invocation.setter(
          #entityId,
          _entityId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set conditionsList(List<String>? _conditionsList) => super.noSuchMethod(
        Invocation.setter(
          #conditionsList,
          _conditionsList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [KLevel].
///
/// See the documentation for Mockito's code generation for more information.
class MockKLevel extends _i1.Mock implements _i31.KLevel {
  MockKLevel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set entityId(String? _entityId) => super.noSuchMethod(
        Invocation.setter(
          #entityId,
          _entityId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set kLevelValue(int? _kLevelValue) => super.noSuchMethod(
        Invocation.setter(
          #kLevelValue,
          _kLevelValue,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Amputation].
///
/// See the documentation for Mockito's code generation for more information.
class MockAmputation extends _i1.Mock implements _i9.Amputation {
  MockAmputation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set entityId(String? _entityId) => super.noSuchMethod(
        Invocation.setter(
          #entityId,
          _entityId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set dateOfAmputation(DateTime? _dateOfAmputation) => super.noSuchMethod(
        Invocation.setter(
          #dateOfAmputation,
          _dateOfAmputation,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set side(_i35.AmputationSide? _side) => super.noSuchMethod(
        Invocation.setter(
          #side,
          _side,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set cause(_i35.CauseOfAmputation? _cause) => super.noSuchMethod(
        Invocation.setter(
          #cause,
          _cause,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set type(_i35.TypeOfAmputation? _type) => super.noSuchMethod(
        Invocation.setter(
          #type,
          _type,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set level(_i35.LevelOfAmputation? _level) => super.noSuchMethod(
        Invocation.setter(
          #level,
          _level,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set abilityToWalk(_i33.YesOrNo? _abilityToWalk) => super.noSuchMethod(
        Invocation.setter(
          #abilityToWalk,
          _abilityToWalk,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set otherPrimaryCause(String? _otherPrimaryCause) => super.noSuchMethod(
        Invocation.setter(
          #otherPrimaryCause,
          _otherPrimaryCause,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i9.Amputation clone() => (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
        ),
        returnValue: _FakeAmputation_8(
          this,
          Invocation.method(
            #clone,
            [],
          ),
        ),
      ) as _i9.Amputation);

  @override
  _i15.Future<dynamic> populate() => (super.noSuchMethod(
        Invocation.method(
          #populate,
          [],
        ),
        returnValue: _i15.Future<dynamic>.value(),
      ) as _i15.Future<dynamic>);

  @override
  Map<String, dynamic> toJsonForPDF(int? index) => (super.noSuchMethod(
        Invocation.method(
          #toJsonForPDF,
          [index],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [SocketInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocketInfo extends _i1.Mock implements _i10.SocketInfo {
  MockSocketInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set entityId(String? _entityId) => super.noSuchMethod(
        Invocation.setter(
          #entityId,
          _entityId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set dateOfDelivery(DateTime? _dateOfDelivery) => super.noSuchMethod(
        Invocation.setter(
          #dateOfDelivery,
          _dateOfDelivery,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set side(_i35.AmputationSide? _side) => super.noSuchMethod(
        Invocation.setter(
          #side,
          _side,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set socket(_i33.Socket? _socket) => super.noSuchMethod(
        Invocation.setter(
          #socket,
          _socket,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set partialFootDesign(_i33.PartialFootDesign? _partialFootDesign) =>
      super.noSuchMethod(
        Invocation.setter(
          #partialFootDesign,
          _partialFootDesign,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set ankleDisarticulationDesign(
          _i33.AnkleDisarticulationDesign? _ankleDisarticulationDesign) =>
      super.noSuchMethod(
        Invocation.setter(
          #ankleDisarticulationDesign,
          _ankleDisarticulationDesign,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set transTibialDesign(_i33.TransTibialDesign? _transTibialDesign) =>
      super.noSuchMethod(
        Invocation.setter(
          #transTibialDesign,
          _transTibialDesign,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set kneeDisarticulationDesign(
          _i33.KneeDisarticulationDesign? _kneeDisarticulationDesign) =>
      super.noSuchMethod(
        Invocation.setter(
          #kneeDisarticulationDesign,
          _kneeDisarticulationDesign,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set transfemoralDesign(_i33.TransfemoralDesign? _transfemoralDesign) =>
      super.noSuchMethod(
        Invocation.setter(
          #transfemoralDesign,
          _transfemoralDesign,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i33.SocketType> get socketTypes => (super.noSuchMethod(
        Invocation.getter(#socketTypes),
        returnValue: <_i33.SocketType>[],
      ) as List<_i33.SocketType>);

  @override
  set socketTypes(List<_i33.SocketType>? _socketTypes) => super.noSuchMethod(
        Invocation.setter(
          #socketTypes,
          _socketTypes,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set liner(_i33.Liner? _liner) => super.noSuchMethod(
        Invocation.setter(
          #liner,
          _liner,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set suspension(_i33.Suspension? _suspension) => super.noSuchMethod(
        Invocation.setter(
          #suspension,
          _suspension,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i33.ProstheticFootType> get prostheticFootTypes => (super.noSuchMethod(
        Invocation.getter(#prostheticFootTypes),
        returnValue: <_i33.ProstheticFootType>[],
      ) as List<_i33.ProstheticFootType>);

  @override
  set prostheticFootTypes(
          List<_i33.ProstheticFootType>? _prostheticFootTypes) =>
      super.noSuchMethod(
        Invocation.setter(
          #prostheticFootTypes,
          _prostheticFootTypes,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i33.ProstheticKneeType> get prostheticKneeTypes => (super.noSuchMethod(
        Invocation.getter(#prostheticKneeTypes),
        returnValue: <_i33.ProstheticKneeType>[],
      ) as List<_i33.ProstheticKneeType>);

  @override
  set prostheticKneeTypes(
          List<_i33.ProstheticKneeType>? _prostheticKneeTypes) =>
      super.noSuchMethod(
        Invocation.setter(
          #prostheticKneeTypes,
          _prostheticKneeTypes,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i33.ProstheticHipType> get prostheticHipTypes => (super.noSuchMethod(
        Invocation.getter(#prostheticHipTypes),
        returnValue: <_i33.ProstheticHipType>[],
      ) as List<_i33.ProstheticHipType>);

  @override
  set prostheticHipTypes(List<_i33.ProstheticHipType>? _prostheticHipTypes) =>
      super.noSuchMethod(
        Invocation.setter(
          #prostheticHipTypes,
          _prostheticHipTypes,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.SocketInfo clone() => (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
        ),
        returnValue: _FakeSocketInfo_9(
          this,
          Invocation.method(
            #clone,
            [],
          ),
        ),
      ) as _i10.SocketInfo);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toJsonForPDF(int? index) => (super.noSuchMethod(
        Invocation.method(
          #toJsonForPDF,
          [index],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [PrePostEpisodeOfCare].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrePostEpisodeOfCare extends _i1.Mock
    implements _i11.PrePostEpisodeOfCare {
  MockPrePostEpisodeOfCare() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set entityId(String? _entityId) => super.noSuchMethod(
        Invocation.setter(
          #entityId,
          _entityId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set dateOfCare(DateTime? _dateOfCare) => super.noSuchMethod(
        Invocation.setter(
          #dateOfCare,
          _dateOfCare,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i33.MobilityDevice> get mobilityDevices => (super.noSuchMethod(
        Invocation.getter(#mobilityDevices),
        returnValue: <_i33.MobilityDevice>[],
      ) as List<_i33.MobilityDevice>);

  @override
  set mobilityDevices(List<_i33.MobilityDevice>? _mobilityDevices) =>
      super.noSuchMethod(
        Invocation.setter(
          #mobilityDevices,
          _mobilityDevices,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set noWalkingAidsUsage(_i33.MobilityDeviceUsage? _noWalkingAidsUsage) =>
      super.noSuchMethod(
        Invocation.setter(
          #noWalkingAidsUsage,
          _noWalkingAidsUsage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set singlePointStickUsage(_i33.MobilityDeviceUsage? _singlePointStickUsage) =>
      super.noSuchMethod(
        Invocation.setter(
          #singlePointStickUsage,
          _singlePointStickUsage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set quadBaseWalkingStickUsage(
          _i33.MobilityDeviceUsage? _quadBaseWalkingStickUsage) =>
      super.noSuchMethod(
        Invocation.setter(
          #quadBaseWalkingStickUsage,
          _quadBaseWalkingStickUsage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set singleCrutchUsage(_i33.MobilityDeviceUsage? _singleCrutchUsage) =>
      super.noSuchMethod(
        Invocation.setter(
          #singleCrutchUsage,
          _singleCrutchUsage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set pairOfCrutchesUsage(_i33.MobilityDeviceUsage? _pairOfCrutchesUsage) =>
      super.noSuchMethod(
        Invocation.setter(
          #pairOfCrutchesUsage,
          _pairOfCrutchesUsage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set walkingFrameWalkerUsage(
          _i33.MobilityDeviceUsage? _walkingFrameWalkerUsage) =>
      super.noSuchMethod(
        Invocation.setter(
          #walkingFrameWalkerUsage,
          _walkingFrameWalkerUsage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set wheeledWalkerUsage(_i33.MobilityDeviceUsage? _wheeledWalkerUsage) =>
      super.noSuchMethod(
        Invocation.setter(
          #wheeledWalkerUsage,
          _wheeledWalkerUsage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set manualWheelchairUsage(_i33.MobilityDeviceUsage? _manualWheelchairUsage) =>
      super.noSuchMethod(
        Invocation.setter(
          #manualWheelchairUsage,
          _manualWheelchairUsage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set poweredWheeledOrMobilityScooterUsage(
          _i33.MobilityDeviceUsage? _poweredWheeledOrMobilityScooterUsage) =>
      super.noSuchMethod(
        Invocation.setter(
          #poweredWheeledOrMobilityScooterUsage,
          _poweredWheeledOrMobilityScooterUsage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set communityParticipation(_i33.IcfQualifiers? _communityParticipation) =>
      super.noSuchMethod(
        Invocation.setter(
          #communityParticipation,
          _communityParticipation,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set communityParticipationWithLimb(
          _i33.IcfQualifiers? _communityParticipationWithLimb) =>
      super.noSuchMethod(
        Invocation.setter(
          #communityParticipationWithLimb,
          _communityParticipationWithLimb,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set abilityToWork(_i33.IcfQualifiers? _abilityToWork) => super.noSuchMethod(
        Invocation.setter(
          #abilityToWork,
          _abilityToWork,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set abilityToWorkWithLimb(_i33.IcfQualifiers? _abilityToWorkWithLimb) =>
      super.noSuchMethod(
        Invocation.setter(
          #abilityToWorkWithLimb,
          _abilityToWorkWithLimb,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set standingTimeInHour(_i33.AmbulatoryActivityLevel? _standingTimeInHour) =>
      super.noSuchMethod(
        Invocation.setter(
          #standingTimeInHour,
          _standingTimeInHour,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set walkingTimeInHour(_i33.AmbulatoryActivityLevel? _walkingTimeInHour) =>
      super.noSuchMethod(
        Invocation.setter(
          #walkingTimeInHour,
          _walkingTimeInHour,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set fall(_i33.YesOrNo? _fall) => super.noSuchMethod(
        Invocation.setter(
          #fall,
          _fall,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set fallFrequency(_i33.FallFrequency? _fallFrequency) => super.noSuchMethod(
        Invocation.setter(
          #fallFrequency,
          _fallFrequency,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set isInjuriousFall(_i33.YesOrNo? _isInjuriousFall) => super.noSuchMethod(
        Invocation.setter(
          #isInjuriousFall,
          _isInjuriousFall,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set socialSupportAccess(_i33.YesOrNo? _socialSupportAccess) =>
      super.noSuchMethod(
        Invocation.setter(
          #socialSupportAccess,
          _socialSupportAccess,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set socialSupportUtil(_i33.YesOrNo? _socialSupportUtil) => super.noSuchMethod(
        Invocation.setter(
          #socialSupportUtil,
          _socialSupportUtil,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set communityServiceAccess(_i33.YesOrNo? _communityServiceAccess) =>
      super.noSuchMethod(
        Invocation.setter(
          #communityServiceAccess,
          _communityServiceAccess,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set communityService(_i33.CommunityService? _communityService) =>
      super.noSuchMethod(
        Invocation.setter(
          #communityService,
          _communityService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i33.MobilityDeviceUsage?> get mobilityDeviceUsages =>
      (super.noSuchMethod(
        Invocation.getter(#mobilityDeviceUsages),
        returnValue: <_i33.MobilityDeviceUsage?>[],
      ) as List<_i33.MobilityDeviceUsage?>);

  @override
  _i11.PrePostEpisodeOfCare clone() => (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
        ),
        returnValue: _FakePrePostEpisodeOfCare_10(
          this,
          Invocation.method(
            #clone,
            [],
          ),
        ),
      ) as _i11.PrePostEpisodeOfCare);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toJsonForPDF() => (super.noSuchMethod(
        Invocation.method(
          #toJsonForPDF,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [EpisodeOfCare].
///
/// See the documentation for Mockito's code generation for more information.
class MockEpisodeOfCare extends _i1.Mock implements _i12.EpisodeOfCare {
  MockEpisodeOfCare() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set entityId(String? _entityId) => super.noSuchMethod(
        Invocation.setter(
          #entityId,
          _entityId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set height(double? _height) => super.noSuchMethod(
        Invocation.setter(
          #height,
          _height,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set weight(double? _weight) => super.noSuchMethod(
        Invocation.setter(
          #weight,
          _weight,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set tobaccoUsage(_i33.TobaccoUsage? _tobaccoUsage) => super.noSuchMethod(
        Invocation.setter(
          #tobaccoUsage,
          _tobaccoUsage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set maxEducationLevel(_i33.MaxEducationLevel? _maxEducationLevel) =>
      super.noSuchMethod(
        Invocation.setter(
          #maxEducationLevel,
          _maxEducationLevel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set icdCodesOfConditions(String? _icdCodesOfConditions) => super.noSuchMethod(
        Invocation.setter(
          #icdCodesOfConditions,
          _icdCodesOfConditions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i33.Profession> get professionsInvolved => (super.noSuchMethod(
        Invocation.getter(#professionsInvolved),
        returnValue: <_i33.Profession>[],
      ) as List<_i33.Profession>);

  @override
  set professionsInvolved(List<_i33.Profession>? _professionsInvolved) =>
      super.noSuchMethod(
        Invocation.setter(
          #professionsInvolved,
          _professionsInvolved,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i33.RehabilitationServices> get rehabilitationServices =>
      (super.noSuchMethod(
        Invocation.getter(#rehabilitationServices),
        returnValue: <_i33.RehabilitationServices>[],
      ) as List<_i33.RehabilitationServices>);

  @override
  set rehabilitationServices(
          List<_i33.RehabilitationServices>? _rehabilitationServices) =>
      super.noSuchMethod(
        Invocation.setter(
          #rehabilitationServices,
          _rehabilitationServices,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i33.CompressionTherapy> get compressionTherapies => (super.noSuchMethod(
        Invocation.getter(#compressionTherapies),
        returnValue: <_i33.CompressionTherapy>[],
      ) as List<_i33.CompressionTherapy>);

  @override
  set compressionTherapies(
          List<_i33.CompressionTherapy>? _compressionTherapies) =>
      super.noSuchMethod(
        Invocation.setter(
          #compressionTherapies,
          _compressionTherapies,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get ctOther => (super.noSuchMethod(
        Invocation.getter(#ctOther),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#ctOther),
        ),
      ) as String);

  @override
  set ctOther(String? _ctOther) => super.noSuchMethod(
        Invocation.setter(
          #ctOther,
          _ctOther,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set prostheticIntervention(
          _i33.ProstheticIntervention? _prostheticIntervention) =>
      super.noSuchMethod(
        Invocation.setter(
          #prostheticIntervention,
          _prostheticIntervention,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i10.SocketInfo> get socketInfoList => (super.noSuchMethod(
        Invocation.getter(#socketInfoList),
        returnValue: <_i10.SocketInfo>[],
      ) as List<_i10.SocketInfo>);

  @override
  set socketInfoList(List<_i10.SocketInfo>? _socketInfoList) =>
      super.noSuchMethod(
        Invocation.setter(
          #socketInfoList,
          _socketInfoList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i12.EpisodeOfCare clone() => (super.noSuchMethod(
        Invocation.method(
          #clone,
          [],
        ),
        returnValue: _FakeEpisodeOfCare_11(
          this,
          Invocation.method(
            #clone,
            [],
          ),
        ),
      ) as _i12.EpisodeOfCare);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toJsonForPDF() => (super.noSuchMethod(
        Invocation.method(
          #toJsonForPDF,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [AmputationFormViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAmputationFormViewModel extends _i1.Mock
    implements _i36.AmputationFormViewModel {
  MockAmputationFormViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.GlobalKey<_i13.FormState> get amputationFormKey => (super.noSuchMethod(
        Invocation.getter(#amputationFormKey),
        returnValue: _FakeGlobalKey_12<_i13.FormState>(
          this,
          Invocation.getter(#amputationFormKey),
        ),
      ) as _i13.GlobalKey<_i13.FormState>);

  @override
  set amputationFormKey(_i13.GlobalKey<_i13.FormState>? _amputationFormKey) =>
      super.noSuchMethod(
        Invocation.setter(
          #amputationFormKey,
          _amputationFormKey,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isEdit => (super.noSuchMethod(
        Invocation.getter(#isEdit),
        returnValue: false,
      ) as bool);

  @override
  bool get isAmputationUpdate => (super.noSuchMethod(
        Invocation.getter(#isAmputationUpdate),
        returnValue: false,
      ) as bool);

  @override
  _i14.Patient get currentPatient => (super.noSuchMethod(
        Invocation.getter(#currentPatient),
        returnValue: _FakePatient_13(
          this,
          Invocation.getter(#currentPatient),
        ),
      ) as _i14.Patient);

  @override
  List<_i9.Amputation> get amputations => (super.noSuchMethod(
        Invocation.getter(#amputations),
        returnValue: <_i9.Amputation>[],
      ) as List<_i9.Amputation>);

  @override
  bool get isModified => (super.noSuchMethod(
        Invocation.getter(#isModified),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool get disposed => (super.noSuchMethod(
        Invocation.getter(#disposed),
        returnValue: false,
      ) as bool);

  @override
  set disposed(bool? _disposed) => super.noSuchMethod(
        Invocation.setter(
          #disposed,
          _disposed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get initialised => (super.noSuchMethod(
        Invocation.getter(#initialised),
        returnValue: false,
      ) as bool);

  @override
  bool get onModelReadyCalled => (super.noSuchMethod(
        Invocation.getter(#onModelReadyCalled),
        returnValue: false,
      ) as bool);

  @override
  bool get isBusy => (super.noSuchMethod(
        Invocation.getter(#isBusy),
        returnValue: false,
      ) as bool);

  @override
  bool get anyObjectsBusy => (super.noSuchMethod(
        Invocation.getter(#anyObjectsBusy),
        returnValue: false,
      ) as bool);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
      ) as bool);

  @override
  void createNewAmputation() => super.noSuchMethod(
        Invocation.method(
          #createNewAmputation,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAmputation(int? index) => super.noSuchMethod(
        Invocation.method(
          #removeAmputation,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChangeAmputationSide(
    int? index,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChangeAmputationSide,
          [
            index,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChangeDateOfAmputation(
    int? index,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChangeDateOfAmputation,
          [
            index,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChangeCauseOfAmputation(
    int? index,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChangeCauseOfAmputation,
          [
            index,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChangeOtherCauseOfAmputation(
    int? index,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChangeOtherCauseOfAmputation,
          [
            index,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChangeTypeOfAmputation(
    int? index,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChangeTypeOfAmputation,
          [
            index,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChangeLevelOfAmputation(
    int? index,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChangeLevelOfAmputation,
          [
            index,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChangeAbilityToWalk(
    int? index,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onChangeAbilityToWalk,
          [
            index,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showInfoDialog({
    required String? title,
    required String? body,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #showInfoDialog,
          [],
          {
            #title: title,
            #body: body,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void validateForm() => super.noSuchMethod(
        Invocation.method(
          #validateForm,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateCloud() => super.noSuchMethod(
        Invocation.method(
          #updateCloud,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateToNext() => super.noSuchMethod(
        Invocation.method(
          #navigateToNext,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onCancelDataCollection() => super.noSuchMethod(
        Invocation.method(
          #onCancelDataCollection,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateBack() => super.noSuchMethod(
        Invocation.method(
          #navigateBack,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rebuildUi() => super.noSuchMethod(
        Invocation.method(
          #rebuildUi,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setInitialised(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setInitialised,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOnModelReadyCalled(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setOnModelReadyCalled,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool busy(Object? object) => (super.noSuchMethod(
        Invocation.method(
          #busy,
          [object],
        ),
        returnValue: false,
      ) as bool);

  @override
  void setBusyForObject(
    Object? object,
    bool? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setBusyForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setBusy(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusy,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T skeletonData<T>({
    required T? realData,
    required T? busyData,
    Object? busyKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #skeletonData,
          [],
          {
            #realData: realData,
            #busyData: busyData,
            #busyKey: busyKey,
          },
        ),
        returnValue: _i25.dummyValue<T>(
          this,
          Invocation.method(
            #skeletonData,
            [],
            {
              #realData: realData,
              #busyData: busyData,
              #busyKey: busyKey,
            },
          ),
        ),
      ) as T);

  @override
  _i15.Future<T> runBusyFuture<T>(
    _i15.Future<T>? busyFuture, {
    Object? busyObject,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runBusyFuture,
          [busyFuture],
          {
            #busyObject: busyObject,
            #throwException: throwException,
          },
        ),
        returnValue: _i25.ifNotNull(
              _i25.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runBusyFuture,
                  [busyFuture],
                  {
                    #busyObject: busyObject,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i15.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #runBusyFuture,
                [busyFuture],
                {
                  #busyObject: busyObject,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i15.Future<T>);

  @override
  dynamic error(Object? object) => super.noSuchMethod(Invocation.method(
        #error,
        [object],
      ));

  @override
  void clearErrors() => super.noSuchMethod(
        Invocation.method(
          #clearErrors,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasErrorForKey(Object? key) => (super.noSuchMethod(
        Invocation.method(
          #hasErrorForKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  void setError(dynamic error) => super.noSuchMethod(
        Invocation.method(
          #setError,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForModelOrObject(
    dynamic value, {
    Object? key,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForModelOrObject,
          [value],
          {#key: key},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForObject(
    Object? object,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<T> runErrorFuture<T>(
    _i15.Future<T>? future, {
    Object? key,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runErrorFuture,
          [future],
          {
            #key: key,
            #throwException: throwException,
          },
        ),
        returnValue: _i25.ifNotNull(
              _i25.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runErrorFuture,
                  [future],
                  {
                    #key: key,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i15.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #runErrorFuture,
                [future],
                {
                  #key: key,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i15.Future<T>);

  @override
  void onFutureError(
    dynamic error,
    Object? key,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onFutureError,
          [
            error,
            key,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<_i37.DialogResponse<dynamic>?> showClientIDWarning(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #showClientIDWarning,
          [id],
        ),
        returnValue: _i15.Future<_i37.DialogResponse<dynamic>?>.value(),
      ) as _i15.Future<_i37.DialogResponse<dynamic>?>);

  @override
  _i15.Future<_i37.DialogResponse<dynamic>?> showPostEpisodeWarning() =>
      (super.noSuchMethod(
        Invocation.method(
          #showPostEpisodeWarning,
          [],
        ),
        returnValue: _i15.Future<_i37.DialogResponse<dynamic>?>.value(),
      ) as _i15.Future<_i37.DialogResponse<dynamic>?>);

  @override
  _i15.Future<void> showGeneratingPDFDialog() => (super.noSuchMethod(
        Invocation.method(
          #showGeneratingPDFDialog,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> showBusyDialog() => (super.noSuchMethod(
        Invocation.method(
          #showBusyDialog,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  void closeBusyDialog() => super.noSuchMethod(
        Invocation.method(
          #closeBusyDialog,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showBadRequest() => super.noSuchMethod(
        Invocation.method(
          #showBadRequest,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showServerError() => super.noSuchMethod(
        Invocation.method(
          #showServerError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showCommunicationError() => super.noSuchMethod(
        Invocation.method(
          #showCommunicationError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showAlreadyExist() => super.noSuchMethod(
        Invocation.method(
          #showAlreadyExist,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showCannotDeleteDialog() => super.noSuchMethod(
        Invocation.method(
          #showCannotDeleteDialog,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<void> showLoginError(_i38.UnauthorisedException? e) =>
      (super.noSuchMethod(
        Invocation.method(
          #showLoginError,
          [e],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  void handleHTTPError(Object? e) => super.noSuchMethod(
        Invocation.method(
          #handleHTTPError,
          [e],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PatientViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockPatientViewModel extends _i1.Mock implements _i39.PatientViewModel {
  MockPatientViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  set isLoading(bool? _isLoading) => super.noSuchMethod(
        Invocation.setter(
          #isLoading,
          _isLoading,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get filterToggle => (super.noSuchMethod(
        Invocation.getter(#filterToggle),
        returnValue: false,
      ) as bool);

  @override
  set filterToggle(bool? _filterToggle) => super.noSuchMethod(
        Invocation.setter(
          #filterToggle,
          _filterToggle,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i16.Box<_i14.Patient> get patientBox => (super.noSuchMethod(
        Invocation.getter(#patientBox),
        returnValue: _FakeBox_15<_i14.Patient>(
          this,
          Invocation.getter(#patientBox),
        ),
      ) as _i16.Box<_i14.Patient>);

  @override
  set currentPatient(_i14.Patient? patient) => super.noSuchMethod(
        Invocation.setter(
          #currentPatient,
          patient,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i18.ListenableServiceMixin> get listenableServices =>
      (super.noSuchMethod(
        Invocation.getter(#listenableServices),
        returnValue: <_i18.ListenableServiceMixin>[],
      ) as List<_i18.ListenableServiceMixin>);

  @override
  bool get rethrowException => (super.noSuchMethod(
        Invocation.getter(#rethrowException),
        returnValue: false,
      ) as bool);

  @override
  bool get changeSource => (super.noSuchMethod(
        Invocation.getter(#changeSource),
        returnValue: false,
      ) as bool);

  @override
  set changeSource(bool? _changeSource) => super.noSuchMethod(
        Invocation.setter(
          #changeSource,
          _changeSource,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i18.ReactiveServiceMixin> get reactiveServices => (super.noSuchMethod(
        Invocation.getter(#reactiveServices),
        returnValue: <_i18.ReactiveServiceMixin>[],
      ) as List<_i18.ReactiveServiceMixin>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  bool get disposed => (super.noSuchMethod(
        Invocation.getter(#disposed),
        returnValue: false,
      ) as bool);

  @override
  set disposed(bool? _disposed) => super.noSuchMethod(
        Invocation.setter(
          #disposed,
          _disposed,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get initialised => (super.noSuchMethod(
        Invocation.getter(#initialised),
        returnValue: false,
      ) as bool);

  @override
  bool get onModelReadyCalled => (super.noSuchMethod(
        Invocation.getter(#onModelReadyCalled),
        returnValue: false,
      ) as bool);

  @override
  bool get isBusy => (super.noSuchMethod(
        Invocation.getter(#isBusy),
        returnValue: false,
      ) as bool);

  @override
  bool get anyObjectsBusy => (super.noSuchMethod(
        Invocation.getter(#anyObjectsBusy),
        returnValue: false,
      ) as bool);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
      ) as bool);

  @override
  bool get hasMessage => (super.noSuchMethod(
        Invocation.getter(#hasMessage),
        returnValue: false,
      ) as bool);

  @override
  set data(List<_i14.Patient>? data) => super.noSuchMethod(
        Invocation.setter(
          #data,
          data,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get dataReady => (super.noSuchMethod(
        Invocation.getter(#dataReady),
        returnValue: false,
      ) as bool);

  @override
  void onData(List<_i14.Patient>? data) => super.noSuchMethod(
        Invocation.method(
          #onData,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<List<_i14.Patient>> futureToRun() => (super.noSuchMethod(
        Invocation.method(
          #futureToRun,
          [],
        ),
        returnValue: _i15.Future<List<_i14.Patient>>.value(<_i14.Patient>[]),
      ) as _i15.Future<List<_i14.Patient>>);

  @override
  _i15.Future<void> filterPatientsByCaregiver() => (super.noSuchMethod(
        Invocation.method(
          #filterPatientsByCaregiver,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> onPullRefresh() => (super.noSuchMethod(
        Invocation.method(
          #onPullRefresh,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  void syncToCloud(List<_i14.Patient>? patients) => super.noSuchMethod(
        Invocation.method(
          #syncToCloud,
          [patients],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPatientTapped(_i14.Patient? selectedPatient) => super.noSuchMethod(
        Invocation.method(
          #onPatientTapped,
          [selectedPatient],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addPatient(_i14.Patient? patient) => super.noSuchMethod(
        Invocation.method(
          #addPatient,
          [patient],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<void> editPatient(_i14.Patient? patient) => (super.noSuchMethod(
        Invocation.method(
          #editPatient,
          [patient],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  void navigateToAddLeadView({
    bool? isEdit = false,
    _i14.Patient? patient,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #navigateToAddLeadView,
          [],
          {
            #isEdit: isEdit,
            #patient: patient,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void navigateToPatientDetailView() => super.noSuchMethod(
        Invocation.method(
          #navigateToPatientDetailView,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<dynamic> initialise() => (super.noSuchMethod(
        Invocation.method(
          #initialise,
          [],
        ),
        returnValue: _i15.Future<dynamic>.value(),
      ) as _i15.Future<dynamic>);

  @override
  void onError(dynamic error) => super.noSuchMethod(
        Invocation.method(
          #onError,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifySourceChanged() => super.noSuchMethod(
        Invocation.method(
          #notifySourceChanged,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void rebuildUi() => super.noSuchMethod(
        Invocation.method(
          #rebuildUi,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setInitialised(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setInitialised,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOnModelReadyCalled(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setOnModelReadyCalled,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool busy(Object? object) => (super.noSuchMethod(
        Invocation.method(
          #busy,
          [object],
        ),
        returnValue: false,
      ) as bool);

  @override
  void setBusyForObject(
    Object? object,
    bool? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setBusyForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setBusy(bool? value) => super.noSuchMethod(
        Invocation.method(
          #setBusy,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T skeletonData<T>({
    required T? realData,
    required T? busyData,
    Object? busyKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #skeletonData,
          [],
          {
            #realData: realData,
            #busyData: busyData,
            #busyKey: busyKey,
          },
        ),
        returnValue: _i25.dummyValue<T>(
          this,
          Invocation.method(
            #skeletonData,
            [],
            {
              #realData: realData,
              #busyData: busyData,
              #busyKey: busyKey,
            },
          ),
        ),
      ) as T);

  @override
  _i15.Future<T> runBusyFuture<T>(
    _i15.Future<T>? busyFuture, {
    Object? busyObject,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runBusyFuture,
          [busyFuture],
          {
            #busyObject: busyObject,
            #throwException: throwException,
          },
        ),
        returnValue: _i25.ifNotNull(
              _i25.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runBusyFuture,
                  [busyFuture],
                  {
                    #busyObject: busyObject,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i15.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #runBusyFuture,
                [busyFuture],
                {
                  #busyObject: busyObject,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i15.Future<T>);

  @override
  dynamic error(Object? object) => super.noSuchMethod(Invocation.method(
        #error,
        [object],
      ));

  @override
  void clearErrors() => super.noSuchMethod(
        Invocation.method(
          #clearErrors,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasErrorForKey(Object? key) => (super.noSuchMethod(
        Invocation.method(
          #hasErrorForKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  void setError(dynamic error) => super.noSuchMethod(
        Invocation.method(
          #setError,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForModelOrObject(
    dynamic value, {
    Object? key,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForModelOrObject,
          [value],
          {#key: key},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setErrorForObject(
    Object? object,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setErrorForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<T> runErrorFuture<T>(
    _i15.Future<T>? future, {
    Object? key,
    bool? throwException = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runErrorFuture,
          [future],
          {
            #key: key,
            #throwException: throwException,
          },
        ),
        returnValue: _i25.ifNotNull(
              _i25.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runErrorFuture,
                  [future],
                  {
                    #key: key,
                    #throwException: throwException,
                  },
                ),
              ),
              (T v) => _i15.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #runErrorFuture,
                [future],
                {
                  #key: key,
                  #throwException: throwException,
                },
              ),
            ),
      ) as _i15.Future<T>);

  @override
  void onFutureError(
    dynamic error,
    Object? key,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onFutureError,
          [
            error,
            key,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String? message(Object? object) => (super.noSuchMethod(Invocation.method(
        #message,
        [object],
      )) as String?);

  @override
  bool hasMessageForKey(Object? key) => (super.noSuchMethod(
        Invocation.method(
          #hasMessageForKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  void clearMessages() => super.noSuchMethod(
        Invocation.method(
          #clearMessages,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMessage(String? message) => super.noSuchMethod(
        Invocation.method(
          #setMessage,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMessageForObject(
    Object? object,
    String? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setMessageForObject,
          [
            object,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<_i37.DialogResponse<dynamic>?> showClientIDWarning(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #showClientIDWarning,
          [id],
        ),
        returnValue: _i15.Future<_i37.DialogResponse<dynamic>?>.value(),
      ) as _i15.Future<_i37.DialogResponse<dynamic>?>);

  @override
  _i15.Future<_i37.DialogResponse<dynamic>?> showPostEpisodeWarning() =>
      (super.noSuchMethod(
        Invocation.method(
          #showPostEpisodeWarning,
          [],
        ),
        returnValue: _i15.Future<_i37.DialogResponse<dynamic>?>.value(),
      ) as _i15.Future<_i37.DialogResponse<dynamic>?>);

  @override
  _i15.Future<void> showGeneratingPDFDialog() => (super.noSuchMethod(
        Invocation.method(
          #showGeneratingPDFDialog,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> showBusyDialog() => (super.noSuchMethod(
        Invocation.method(
          #showBusyDialog,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  void closeBusyDialog() => super.noSuchMethod(
        Invocation.method(
          #closeBusyDialog,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showBadRequest() => super.noSuchMethod(
        Invocation.method(
          #showBadRequest,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showServerError() => super.noSuchMethod(
        Invocation.method(
          #showServerError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showCommunicationError() => super.noSuchMethod(
        Invocation.method(
          #showCommunicationError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showAlreadyExist() => super.noSuchMethod(
        Invocation.method(
          #showAlreadyExist,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showCannotDeleteDialog() => super.noSuchMethod(
        Invocation.method(
          #showCannotDeleteDialog,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<void> showLoginError(_i38.UnauthorisedException? e) =>
      (super.noSuchMethod(
        Invocation.method(
          #showLoginError,
          [e],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  void handleHTTPError(Object? e) => super.noSuchMethod(
        Invocation.method(
          #handleHTTPError,
          [e],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HiveInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveInterface extends _i1.Mock implements _i16.HiveInterface {
  MockHiveInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void init(
    String? path, {
    _i16.HiveStorageBackendPreference? backendPreference =
        _i16.HiveStorageBackendPreference.native,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #init,
          [path],
          {#backendPreference: backendPreference},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<_i16.Box<E>> openBox<E>(
    String? name, {
    _i16.HiveCipher? encryptionCipher,
    _i16.KeyComparator? keyComparator = _i40.defaultKeyComparator,
    _i16.CompactionStrategy? compactionStrategy =
        _i41.defaultCompactionStrategy,
    bool? crashRecovery = true,
    String? path,
    _i28.Uint8List? bytes,
    String? collection,
    List<int>? encryptionKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openBox,
          [name],
          {
            #encryptionCipher: encryptionCipher,
            #keyComparator: keyComparator,
            #compactionStrategy: compactionStrategy,
            #crashRecovery: crashRecovery,
            #path: path,
            #bytes: bytes,
            #collection: collection,
            #encryptionKey: encryptionKey,
          },
        ),
        returnValue: _i15.Future<_i16.Box<E>>.value(_FakeBox_15<E>(
          this,
          Invocation.method(
            #openBox,
            [name],
            {
              #encryptionCipher: encryptionCipher,
              #keyComparator: keyComparator,
              #compactionStrategy: compactionStrategy,
              #crashRecovery: crashRecovery,
              #path: path,
              #bytes: bytes,
              #collection: collection,
              #encryptionKey: encryptionKey,
            },
          ),
        )),
      ) as _i15.Future<_i16.Box<E>>);

  @override
  _i15.Future<_i16.LazyBox<E>> openLazyBox<E>(
    String? name, {
    _i16.HiveCipher? encryptionCipher,
    _i16.KeyComparator? keyComparator = _i40.defaultKeyComparator,
    _i16.CompactionStrategy? compactionStrategy =
        _i41.defaultCompactionStrategy,
    bool? crashRecovery = true,
    String? path,
    String? collection,
    List<int>? encryptionKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openLazyBox,
          [name],
          {
            #encryptionCipher: encryptionCipher,
            #keyComparator: keyComparator,
            #compactionStrategy: compactionStrategy,
            #crashRecovery: crashRecovery,
            #path: path,
            #collection: collection,
            #encryptionKey: encryptionKey,
          },
        ),
        returnValue: _i15.Future<_i16.LazyBox<E>>.value(_FakeLazyBox_16<E>(
          this,
          Invocation.method(
            #openLazyBox,
            [name],
            {
              #encryptionCipher: encryptionCipher,
              #keyComparator: keyComparator,
              #compactionStrategy: compactionStrategy,
              #crashRecovery: crashRecovery,
              #path: path,
              #collection: collection,
              #encryptionKey: encryptionKey,
            },
          ),
        )),
      ) as _i15.Future<_i16.LazyBox<E>>);

  @override
  _i16.Box<E> box<E>(String? name) => (super.noSuchMethod(
        Invocation.method(
          #box,
          [name],
        ),
        returnValue: _FakeBox_15<E>(
          this,
          Invocation.method(
            #box,
            [name],
          ),
        ),
      ) as _i16.Box<E>);

  @override
  _i16.LazyBox<E> lazyBox<E>(String? name) => (super.noSuchMethod(
        Invocation.method(
          #lazyBox,
          [name],
        ),
        returnValue: _FakeLazyBox_16<E>(
          this,
          Invocation.method(
            #lazyBox,
            [name],
          ),
        ),
      ) as _i16.LazyBox<E>);

  @override
  bool isBoxOpen(String? name) => (super.noSuchMethod(
        Invocation.method(
          #isBoxOpen,
          [name],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i15.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> deleteBoxFromDisk(
    String? name, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBoxFromDisk,
          [name],
          {#path: path},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  List<int> generateSecureKey() => (super.noSuchMethod(
        Invocation.method(
          #generateSecureKey,
          [],
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  _i15.Future<bool> boxExists(
    String? name, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #boxExists,
          [name],
          {#path: path},
        ),
        returnValue: _i15.Future<bool>.value(false),
      ) as _i15.Future<bool>);

  @override
  void resetAdapters() => super.noSuchMethod(
        Invocation.method(
          #resetAdapters,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerAdapter<T>(
    _i16.TypeAdapter<T>? adapter, {
    bool? internal = false,
    bool? override = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerAdapter,
          [adapter],
          {
            #internal: internal,
            #override: override,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isAdapterRegistered(int? typeId) => (super.noSuchMethod(
        Invocation.method(
          #isAdapterRegistered,
          [typeId],
        ),
        returnValue: false,
      ) as bool);

  @override
  void ignoreTypeId<T>(int? typeId) => super.noSuchMethod(
        Invocation.method(
          #ignoreTypeId,
          [typeId],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i16.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);

  @override
  bool get lazy => (super.noSuchMethod(
        Invocation.getter(#lazy),
        returnValue: false,
      ) as bool);

  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  Iterable<E> valuesBetween({
    dynamic startKey,
    dynamic endKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #valuesBetween,
          [],
          {
            #startKey: startKey,
            #endKey: endKey,
          },
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  E? getAt(int? index) => (super.noSuchMethod(Invocation.method(
        #getAt,
        [index],
      )) as E?);

  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, E>{},
      ) as Map<dynamic, E>);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(Invocation.method(
        #keyAt,
        [index],
      ));

  @override
  _i15.Stream<_i16.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i15.Stream<_i16.BoxEvent>.empty(),
      ) as _i15.Stream<_i16.BoxEvent>);

  @override
  bool containsKey(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i15.Future<void> put(
    dynamic key,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> putAt(
    int? index,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            value,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [entries],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<int> add(E? value) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue: _i15.Future<int>.value(0),
      ) as _i15.Future<int>);

  @override
  _i15.Future<Iterable<int>> addAll(Iterable<E>? values) => (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [values],
        ),
        returnValue: _i15.Future<Iterable<int>>.value(<int>[]),
      ) as _i15.Future<Iterable<int>>);

  @override
  _i15.Future<void> delete(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> deleteAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [index],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> compact() => (super.noSuchMethod(
        Invocation.method(
          #compact,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<int> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i15.Future<int>.value(0),
      ) as _i15.Future<int>);

  @override
  _i15.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i37.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
        returnValueForMissingStub: _i25.dummyValue<String>(
          this,
          Invocation.getter(#previousRoute),
        ),
      ) as String);

  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
        returnValueForMissingStub: _i25.dummyValue<String>(
          this,
          Invocation.getter(#currentRoute),
        ),
      ) as String);

  @override
  _i13.GlobalKey<_i13.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i13.GlobalKey<_i13.NavigatorState>?);

  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i37.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<T?>? navigateWithTransition<T>(
    _i13.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i13.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i37.Transition? transitionClass,
    _i37.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i15.Future<T?>?);

  @override
  _i15.Future<T?>? replaceWithTransition<T>(
    _i13.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i13.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i37.Transition? transitionClass,
    _i37.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i15.Future<T?>?);

  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void popUntil(
    _i13.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i13.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i15.Future<T?>?);

  @override
  _i15.Future<T?>? navigateToView<T>(
    _i13.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i13.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i37.Transition? transition,
    _i37.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i15.Future<T?>?);

  @override
  _i15.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i13.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i15.Future<T?>?);

  @override
  _i15.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i15.Future<T?>?);

  @override
  _i15.Future<T?>? clearStackAndShowView<T>(
    _i13.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i15.Future<T?>?);

  @override
  _i15.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i15.Future<T?>?);

  @override
  _i15.Future<T?>? clearTillFirstAndShowView<T>(
    _i13.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i15.Future<T?>?);

  @override
  _i15.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i13.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i15.Future<T?>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i37.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i37.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<_i37.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
    double? elevation = 1.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
            #elevation: elevation,
          },
        ),
        returnValue: _i15.Future<_i37.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i15.Future<_i37.SheetResponse<dynamic>?>.value(),
      ) as _i15.Future<_i37.SheetResponse<dynamic>?>);

  @override
  _i15.Future<_i37.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i6.Color? barrierColor = const _i6.Color(2315255808),
    double? elevation = 1.0,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #elevation: elevation,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i15.Future<_i37.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i15.Future<_i37.SheetResponse<T>?>.value(),
      ) as _i15.Future<_i37.SheetResponse<T>?>);

  @override
  void completeSheet(_i37.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i37.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i37.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i13.Widget Function(
      _i13.BuildContext,
      _i37.DialogRequest<dynamic>,
      dynamic Function(_i37.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<_i37.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i6.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i6.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i37.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i15.Future<_i37.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i15.Future<_i37.DialogResponse<dynamic>?>.value(),
      ) as _i15.Future<_i37.DialogResponse<dynamic>?>);

  @override
  _i15.Future<_i37.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i6.Color? barrierColor = const _i6.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    bool? useSafeArea = true,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i15.Future<_i37.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i15.Future<_i37.DialogResponse<T>?>.value(),
      ) as _i15.Future<_i37.DialogResponse<T>?>);

  @override
  _i15.Future<_i37.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i6.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i6.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i37.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i15.Future<_i37.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i15.Future<_i37.DialogResponse<dynamic>?>.value(),
      ) as _i15.Future<_i37.DialogResponse<dynamic>?>);

  @override
  void completeDialog(_i37.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BiotService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBiotService extends _i1.Mock implements _i38.BiotService {
  @override
  String get token => (super.noSuchMethod(
        Invocation.getter(#token),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#token),
        ),
        returnValueForMissingStub: _i25.dummyValue<String>(
          this,
          Invocation.getter(#token),
        ),
      ) as String);

  @override
  set token(String? _token) => super.noSuchMethod(
        Invocation.setter(
          #token,
          _token,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get userId => (super.noSuchMethod(
        Invocation.getter(#userId),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#userId),
        ),
        returnValueForMissingStub: _i25.dummyValue<String>(
          this,
          Invocation.getter(#userId),
        ),
      ) as String);

  @override
  set userId(String? _userId) => super.noSuchMethod(
        Invocation.setter(
          #userId,
          _userId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set caregiverId(String? _caregiverId) => super.noSuchMethod(
        Invocation.setter(
          #caregiverId,
          _caregiverId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set caregiverName(String? _caregiverName) => super.noSuchMethod(
        Invocation.setter(
          #caregiverName,
          _caregiverName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get ownerOrganizationId => (super.noSuchMethod(
        Invocation.getter(#ownerOrganizationId),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#ownerOrganizationId),
        ),
        returnValueForMissingStub: _i25.dummyValue<String>(
          this,
          Invocation.getter(#ownerOrganizationId),
        ),
      ) as String);

  @override
  set ownerOrganizationId(String? _ownerOrganizationId) => super.noSuchMethod(
        Invocation.setter(
          #ownerOrganizationId,
          _ownerOrganizationId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get ownerOrganizationCode => (super.noSuchMethod(
        Invocation.getter(#ownerOrganizationCode),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#ownerOrganizationCode),
        ),
        returnValueForMissingStub: _i25.dummyValue<String>(
          this,
          Invocation.getter(#ownerOrganizationCode),
        ),
      ) as String);

  @override
  set ownerOrganizationCode(String? _ownerOrganizationCode) =>
      super.noSuchMethod(
        Invocation.setter(
          #ownerOrganizationCode,
          _ownerOrganizationCode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get refreshToken => (super.noSuchMethod(
        Invocation.getter(#refreshToken),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#refreshToken),
        ),
        returnValueForMissingStub: _i25.dummyValue<String>(
          this,
          Invocation.getter(#refreshToken),
        ),
      ) as String);

  @override
  set refreshToken(String? _refreshToken) => super.noSuchMethod(
        Invocation.setter(
          #refreshToken,
          _refreshToken,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set updateTime(DateTime? _updateTime) => super.noSuchMethod(
        Invocation.setter(
          #updateTime,
          _updateTime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_17(
          this,
          Invocation.getter(#client),
        ),
        returnValueForMissingStub: _FakeClient_17(
          this,
          Invocation.getter(#client),
        ),
      ) as _i4.Client);

  @override
  set client(_i4.Client? _client) => super.noSuchMethod(
        Invocation.setter(
          #client,
          _client,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, String> get jsonRequestHeaders => (super.noSuchMethod(
        Invocation.getter(#jsonRequestHeaders),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, String> get textRequestHeaders => (super.noSuchMethod(
        Invocation.getter(#textRequestHeaders),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, String> get requestHeadersAuthorization => (super.noSuchMethod(
        Invocation.getter(#requestHeadersAuthorization),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, String> get requestHeadersConfirmEmail => (super.noSuchMethod(
        Invocation.getter(#requestHeadersConfirmEmail),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  _i15.Future<void> loginWithCredentials(
    dynamic id,
    dynamic pwd,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithCredentials,
          [
            id,
            pwd,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> refreshTokens() => (super.noSuchMethod(
        Invocation.method(
          #refreshTokens,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<List<_i14.Patient>> getPatients({
    bool? isRetry = false,
    String? caregiverId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPatients,
          [],
          {
            #isRetry: isRetry,
            #caregiverId: caregiverId,
          },
        ),
        returnValue: _i15.Future<List<_i14.Patient>>.value(<_i14.Patient>[]),
        returnValueForMissingStub:
            _i15.Future<List<_i14.Patient>>.value(<_i14.Patient>[]),
      ) as _i15.Future<List<_i14.Patient>>);

  @override
  _i15.Future<void> addPatient(
    _i14.Patient? patient, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPatient,
          [patient],
          {#isRetry: isRetry},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> editPatient(
    _i14.Patient? patient, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editPatient,
          [patient],
          {#isRetry: isRetry},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<String> addDomainWeightDistribution({
    required _i8.DomainWeightDistribution? domainWeightDist,
    required String? patientName,
    String? date,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDomainWeightDistribution,
          [],
          {
            #domainWeightDist: domainWeightDist,
            #patientName: patientName,
            #date: date,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i15.Future<String>.value(_i25.dummyValue<String>(
          this,
          Invocation.method(
            #addDomainWeightDistribution,
            [],
            {
              #domainWeightDist: domainWeightDist,
              #patientName: patientName,
              #date: date,
              #isRetry: isRetry,
            },
          ),
        )),
        returnValueForMissingStub:
            _i15.Future<String>.value(_i25.dummyValue<String>(
          this,
          Invocation.method(
            #addDomainWeightDistribution,
            [],
            {
              #domainWeightDist: domainWeightDist,
              #patientName: patientName,
              #date: date,
              #isRetry: isRetry,
            },
          ),
        )),
      ) as _i15.Future<String>);

  @override
  _i15.Future<String> addKLevel({
    required _i31.KLevel? kLevel,
    required String? patientName,
    String? date,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addKLevel,
          [],
          {
            #kLevel: kLevel,
            #patientName: patientName,
            #date: date,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i15.Future<String>.value(_i25.dummyValue<String>(
          this,
          Invocation.method(
            #addKLevel,
            [],
            {
              #kLevel: kLevel,
              #patientName: patientName,
              #date: date,
              #isRetry: isRetry,
            },
          ),
        )),
        returnValueForMissingStub:
            _i15.Future<String>.value(_i25.dummyValue<String>(
          this,
          Invocation.method(
            #addKLevel,
            [],
            {
              #kLevel: kLevel,
              #patientName: patientName,
              #date: date,
              #isRetry: isRetry,
            },
          ),
        )),
      ) as _i15.Future<String>);

  @override
  _i15.Future<String> addCondition(
    _i30.Condition? condition,
    String? patientName, {
    String? date,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCondition,
          [
            condition,
            patientName,
          ],
          {
            #date: date,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i15.Future<String>.value(_i25.dummyValue<String>(
          this,
          Invocation.method(
            #addCondition,
            [
              condition,
              patientName,
            ],
            {
              #date: date,
              #isRetry: isRetry,
            },
          ),
        )),
        returnValueForMissingStub:
            _i15.Future<String>.value(_i25.dummyValue<String>(
          this,
          Invocation.method(
            #addCondition,
            [
              condition,
              patientName,
            ],
            {
              #date: date,
              #isRetry: isRetry,
            },
          ),
        )),
      ) as _i15.Future<String>);

  @override
  _i15.Future<List<_i29.Encounter>> getEncounters({
    bool? isRetry = false,
    required String? patientEntityId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEncounters,
          [],
          {
            #isRetry: isRetry,
            #patientEntityId: patientEntityId,
          },
        ),
        returnValue:
            _i15.Future<List<_i29.Encounter>>.value(<_i29.Encounter>[]),
        returnValueForMissingStub:
            _i15.Future<List<_i29.Encounter>>.value(<_i29.Encounter>[]),
      ) as _i15.Future<List<_i29.Encounter>>);

  @override
  _i15.Future<void> addEncounter(
    _i29.Encounter? encounter,
    _i14.Patient? patient, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addEncounter,
          [
            encounter,
            patient,
          ],
          {#isRetry: isRetry},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> editEncounter(
    _i29.Encounter? encounter, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editEncounter,
          [encounter],
          {#isRetry: isRetry},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> editEncounterWithPostEncounterId(
    _i29.Encounter? postEncounter, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editEncounterWithPostEncounterId,
          [postEncounter],
          {#isRetry: isRetry},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<String> addOutcomeMeasure(
    int? index,
    _i5.OutcomeMeasure? outcomeMeasure,
    _i14.Patient? patient, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addOutcomeMeasure,
          [
            index,
            outcomeMeasure,
            patient,
          ],
          {#isRetry: isRetry},
        ),
        returnValue: _i15.Future<String>.value(_i25.dummyValue<String>(
          this,
          Invocation.method(
            #addOutcomeMeasure,
            [
              index,
              outcomeMeasure,
              patient,
            ],
            {#isRetry: isRetry},
          ),
        )),
        returnValueForMissingStub:
            _i15.Future<String>.value(_i25.dummyValue<String>(
          this,
          Invocation.method(
            #addOutcomeMeasure,
            [
              index,
              outcomeMeasure,
              patient,
            ],
            {#isRetry: isRetry},
          ),
        )),
      ) as _i15.Future<String>);

  @override
  _i15.Future<void> getOrganizationCodeById({bool? isRetry = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrganizationCodeById,
          [],
          {#isRetry: isRetry},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<List<_i9.Amputation>> getAmputations({
    bool? isRetry = false,
    String? patientId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAmputations,
          [],
          {
            #isRetry: isRetry,
            #patientId: patientId,
          },
        ),
        returnValue:
            _i15.Future<List<_i9.Amputation>>.value(<_i9.Amputation>[]),
        returnValueForMissingStub:
            _i15.Future<List<_i9.Amputation>>.value(<_i9.Amputation>[]),
      ) as _i15.Future<List<_i9.Amputation>>);

  @override
  _i15.Future<_i9.Amputation> getAmputation({
    bool? isRetry = false,
    required String? amputationId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAmputation,
          [],
          {
            #isRetry: isRetry,
            #amputationId: amputationId,
          },
        ),
        returnValue: _i15.Future<_i9.Amputation>.value(_FakeAmputation_8(
          this,
          Invocation.method(
            #getAmputation,
            [],
            {
              #isRetry: isRetry,
              #amputationId: amputationId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i15.Future<_i9.Amputation>.value(_FakeAmputation_8(
          this,
          Invocation.method(
            #getAmputation,
            [],
            {
              #isRetry: isRetry,
              #amputationId: amputationId,
            },
          ),
        )),
      ) as _i15.Future<_i9.Amputation>);

  @override
  _i15.Future<void> addAmputation(
    _i9.Amputation? amputation, {
    required _i14.Patient? patient,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAmputation,
          [amputation],
          {
            #patient: patient,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> editAmputation(
    _i9.Amputation? amputation, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editAmputation,
          [amputation],
          {#isRetry: isRetry},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> deleteAmputations(
    List<_i9.Amputation>? amputationList, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAmputations,
          [amputationList],
          {#isRetry: isRetry},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> addEpisodeOfCare(
    _i12.EpisodeOfCare? episodeOfCare, {
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addEpisodeOfCare,
          [episodeOfCare],
          {#isRetry: isRetry},
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> editEpisodeOfCare({
    required _i12.EpisodeOfCare? episodeOfCare,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editEpisodeOfCare,
          [],
          {
            #episodeOfCare: episodeOfCare,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> addPrePost({
    required _i11.PrePostEpisodeOfCare? prePostEpisodeOfCare,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPrePost,
          [],
          {
            #prePostEpisodeOfCare: prePostEpisodeOfCare,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> editPrePost({
    required _i11.PrePostEpisodeOfCare? prePostEpisodeOfCare,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editPrePost,
          [],
          {
            #prePostEpisodeOfCare: prePostEpisodeOfCare,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> addSocketInfo({
    required _i12.EpisodeOfCare? episodeOfCare,
    required _i10.SocketInfo? socketInfo,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addSocketInfo,
          [],
          {
            #episodeOfCare: episodeOfCare,
            #socketInfo: socketInfo,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> editSocketInfo({
    required _i10.SocketInfo? socketInfo,
    bool? isRetry = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editSocketInfo,
          [],
          {
            #socketInfo: socketInfo,
            #isRetry: isRetry,
          },
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> addPatientWithDetails(_i14.Patient? patient) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPatientWithDetails,
          [patient],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<void> addEncounterWithDetails(
    _i29.Encounter? encounter,
    _i14.Patient? patient,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addEncounterWithDetails,
          [
            encounter,
            patient,
          ],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i42.DatabaseService {
  @override
  _i16.Box<_i14.Patient> get patientsBox => (super.noSuchMethod(
        Invocation.getter(#patientsBox),
        returnValue: _FakeBox_15<_i14.Patient>(
          this,
          Invocation.getter(#patientsBox),
        ),
        returnValueForMissingStub: _FakeBox_15<_i14.Patient>(
          this,
          Invocation.getter(#patientsBox),
        ),
      ) as _i16.Box<_i14.Patient>);

  @override
  set patientsBox(_i16.Box<_i14.Patient>? _patientsBox) => super.noSuchMethod(
        Invocation.setter(
          #patientsBox,
          _patientsBox,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set currentPatient(_i18.ReactiveValue<_i14.Patient>? _currentPatient) =>
      super.noSuchMethod(
        Invocation.setter(
          #currentPatient,
          _currentPatient,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onCurrentPatientDataChanged(Function? _onCurrentPatientDataChanged) =>
      super.noSuchMethod(
        Invocation.setter(
          #onCurrentPatientDataChanged,
          _onCurrentPatientDataChanged,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void updateCurrentPatient() => super.noSuchMethod(
        Invocation.method(
          #updateCurrentPatient,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i14.Patient> getPatientFromHive() => (super.noSuchMethod(
        Invocation.method(
          #getPatientFromHive,
          [],
        ),
        returnValue: <_i14.Patient>[],
        returnValueForMissingStub: <_i14.Patient>[],
      ) as List<_i14.Patient>);

  @override
  void addPatient(_i14.Patient? patient) => super.noSuchMethod(
        Invocation.method(
          #addPatient,
          [patient],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deletePatientFromHive(dynamic patientId) => super.noSuchMethod(
        Invocation.method(
          #deletePatientFromHive,
          [patientId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void editPatient(_i14.Patient? patient) => super.noSuchMethod(
        Invocation.method(
          #editPatient,
          [patient],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SharedPreferencesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesService extends _i1.Mock
    implements _i43.SharedPreferencesService {}

/// A class which mocks [PackageInfoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageInfoService extends _i1.Mock
    implements _i44.PackageInfoService {
  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileService extends _i1.Mock implements _i45.FileService {
  @override
  _i15.Future<_i17.File> writeFile(
    String? fileBody,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeFile,
          [
            fileBody,
            fileName,
          ],
        ),
        returnValue: _i15.Future<_i17.File>.value(_FakeFile_18(
          this,
          Invocation.method(
            #writeFile,
            [
              fileBody,
              fileName,
            ],
          ),
        )),
        returnValueForMissingStub: _i15.Future<_i17.File>.value(_FakeFile_18(
          this,
          Invocation.method(
            #writeFile,
            [
              fileBody,
              fileName,
            ],
          ),
        )),
      ) as _i15.Future<_i17.File>);
}

/// A class which mocks [OutcomeMeasureSelectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOutcomeMeasureSelectionService extends _i1.Mock
    implements _i46.OutcomeMeasureSelectionService {
  @override
  _i18.ReactiveValue<List<_i5.OutcomeMeasure>> get individualOutcomeMeasures =>
      (super.noSuchMethod(
        Invocation.getter(#individualOutcomeMeasures),
        returnValue: _FakeReactiveValue_19<List<_i5.OutcomeMeasure>>(
          this,
          Invocation.getter(#individualOutcomeMeasures),
        ),
        returnValueForMissingStub:
            _FakeReactiveValue_19<List<_i5.OutcomeMeasure>>(
          this,
          Invocation.getter(#individualOutcomeMeasures),
        ),
      ) as _i18.ReactiveValue<List<_i5.OutcomeMeasure>>);

  @override
  set individualOutcomeMeasures(
          _i18.ReactiveValue<List<_i5.OutcomeMeasure>>?
              _individualOutcomeMeasures) =>
      super.noSuchMethod(
        Invocation.setter(
          #individualOutcomeMeasures,
          _individualOutcomeMeasures,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i18.ReactiveValue<List<_i19.OutcomeMeasureCollection>>
      get outcomeMeasureCollections => (super.noSuchMethod(
            Invocation.getter(#outcomeMeasureCollections),
            returnValue:
                _FakeReactiveValue_19<List<_i19.OutcomeMeasureCollection>>(
              this,
              Invocation.getter(#outcomeMeasureCollections),
            ),
            returnValueForMissingStub:
                _FakeReactiveValue_19<List<_i19.OutcomeMeasureCollection>>(
              this,
              Invocation.getter(#outcomeMeasureCollections),
            ),
          ) as _i18.ReactiveValue<List<_i19.OutcomeMeasureCollection>>);

  @override
  set outcomeMeasureCollections(
          _i18.ReactiveValue<List<_i19.OutcomeMeasureCollection>>?
              _outcomeMeasureCollections) =>
      super.noSuchMethod(
        Invocation.setter(
          #outcomeMeasureCollections,
          _outcomeMeasureCollections,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i5.OutcomeMeasure> get selectedOutcomeMeasures => (super.noSuchMethod(
        Invocation.getter(#selectedOutcomeMeasures),
        returnValue: <_i5.OutcomeMeasure>[],
        returnValueForMissingStub: <_i5.OutcomeMeasure>[],
      ) as List<_i5.OutcomeMeasure>);

  @override
  Map<_i26.DomainType, List<_i5.OutcomeMeasure>>
      get outcomeMeasuresMapByDomainType => (super.noSuchMethod(
            Invocation.getter(#outcomeMeasuresMapByDomainType),
            returnValue: <_i26.DomainType, List<_i5.OutcomeMeasure>>{},
            returnValueForMissingStub: <_i26.DomainType,
                List<_i5.OutcomeMeasure>>{},
          ) as Map<_i26.DomainType, List<_i5.OutcomeMeasure>>);

  @override
  int get patientTimeToComplete => (super.noSuchMethod(
        Invocation.getter(#patientTimeToComplete),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get assistantTimeToComplete => (super.noSuchMethod(
        Invocation.getter(#assistantTimeToComplete),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get clinicianTimeToComplete => (super.noSuchMethod(
        Invocation.getter(#clinicianTimeToComplete),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addOutcomeMeasure(_i5.OutcomeMeasure? outcomeMeasure) =>
      super.noSuchMethod(
        Invocation.method(
          #addOutcomeMeasure,
          [outcomeMeasure],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeOutcomeMeasure(_i5.OutcomeMeasure? outcomeMeasure) =>
      super.noSuchMethod(
        Invocation.method(
          #removeOutcomeMeasure,
          [outcomeMeasure],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addOutcomeMeasureCollection(
          _i19.OutcomeMeasureCollection? outcomeMeasureCollection) =>
      super.noSuchMethod(
        Invocation.method(
          #addOutcomeMeasureCollection,
          [outcomeMeasureCollection],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeOutcomeMeasureCollection(
          _i19.OutcomeMeasureCollection? outcomeMeasureCollection) =>
      super.noSuchMethod(
        Invocation.method(
          #removeOutcomeMeasureCollection,
          [outcomeMeasureCollection],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [OutcomeMeasureLoadService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOutcomeMeasureLoadService extends _i1.Mock
    implements _i47.OutcomeMeasureLoadService {
  @override
  List<dynamic> get allOutcomeMeasuresJson => (super.noSuchMethod(
        Invocation.getter(#allOutcomeMeasuresJson),
        returnValue: <dynamic>[],
        returnValueForMissingStub: <dynamic>[],
      ) as List<dynamic>);

  @override
  set allOutcomeMeasuresJson(List<dynamic>? _allOutcomeMeasuresJson) =>
      super.noSuchMethod(
        Invocation.setter(
          #allOutcomeMeasuresJson,
          _allOutcomeMeasuresJson,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i19.OutcomeMeasureCollection get allOutcomeMeasures => (super.noSuchMethod(
        Invocation.getter(#allOutcomeMeasures),
        returnValue: _FakeOutcomeMeasureCollection_20(
          this,
          Invocation.getter(#allOutcomeMeasures),
        ),
        returnValueForMissingStub: _FakeOutcomeMeasureCollection_20(
          this,
          Invocation.getter(#allOutcomeMeasures),
        ),
      ) as _i19.OutcomeMeasureCollection);

  @override
  set allOutcomeMeasures(_i19.OutcomeMeasureCollection? _allOutcomeMeasures) =>
      super.noSuchMethod(
        Invocation.setter(
          #allOutcomeMeasures,
          _allOutcomeMeasures,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i19.OutcomeMeasureCollection> get defaultOutcomeMeasureCollections =>
      (super.noSuchMethod(
        Invocation.getter(#defaultOutcomeMeasureCollections),
        returnValue: <_i19.OutcomeMeasureCollection>[],
        returnValueForMissingStub: <_i19.OutcomeMeasureCollection>[],
      ) as List<_i19.OutcomeMeasureCollection>);

  @override
  set defaultOutcomeMeasureCollections(
          List<_i19.OutcomeMeasureCollection>?
              _defaultOutcomeMeasureCollections) =>
      super.noSuchMethod(
        Invocation.setter(
          #defaultOutcomeMeasureCollections,
          _defaultOutcomeMeasureCollections,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<_i19.OutcomeMeasureCollection> getAllOutcomeMeasures(
          String? fileName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllOutcomeMeasures,
          [fileName],
        ),
        returnValue: _i15.Future<_i19.OutcomeMeasureCollection>.value(
            _FakeOutcomeMeasureCollection_20(
          this,
          Invocation.method(
            #getAllOutcomeMeasures,
            [fileName],
          ),
        )),
        returnValueForMissingStub:
            _i15.Future<_i19.OutcomeMeasureCollection>.value(
                _FakeOutcomeMeasureCollection_20(
          this,
          Invocation.method(
            #getAllOutcomeMeasures,
            [fileName],
          ),
        )),
      ) as _i15.Future<_i19.OutcomeMeasureCollection>);

  @override
  _i15.Future<void> getOutcomeMeasureCollections(String? fileName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOutcomeMeasureCollections,
          [fileName],
        ),
        returnValue: _i15.Future<void>.value(),
        returnValueForMissingStub: _i15.Future<void>.value(),
      ) as _i15.Future<void>);

  @override
  _i15.Future<List<dynamic>> getOutcomeQuestions(String? fileName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOutcomeQuestions,
          [fileName],
        ),
        returnValue: _i15.Future<List<dynamic>>.value(<dynamic>[]),
        returnValueForMissingStub:
            _i15.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i15.Future<List<dynamic>>);

  @override
  _i15.Future<dynamic> getOutcomeInfo(String? fileName) => (super.noSuchMethod(
        Invocation.method(
          #getOutcomeInfo,
          [fileName],
        ),
        returnValue: _i15.Future<dynamic>.value(),
        returnValueForMissingStub: _i15.Future<dynamic>.value(),
      ) as _i15.Future<dynamic>);

  @override
  _i19.OutcomeMeasureCollection getCollection({required String? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCollection,
          [],
          {#id: id},
        ),
        returnValue: _FakeOutcomeMeasureCollection_20(
          this,
          Invocation.method(
            #getCollection,
            [],
            {#id: id},
          ),
        ),
        returnValueForMissingStub: _FakeOutcomeMeasureCollection_20(
          this,
          Invocation.method(
            #getCollection,
            [],
            {#id: id},
          ),
        ),
      ) as _i19.OutcomeMeasureCollection);
}

/// A class which mocks [PdfService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPdfService extends _i1.Mock implements _i48.PdfService {
  @override
  _i20.NumberFormat get numberFormatter => (super.noSuchMethod(
        Invocation.getter(#numberFormatter),
        returnValue: _FakeNumberFormat_21(
          this,
          Invocation.getter(#numberFormatter),
        ),
        returnValueForMissingStub: _FakeNumberFormat_21(
          this,
          Invocation.getter(#numberFormatter),
        ),
      ) as _i20.NumberFormat);

  @override
  set numberFormatter(_i20.NumberFormat? _numberFormatter) =>
      super.noSuchMethod(
        Invocation.setter(
          #numberFormatter,
          _numberFormatter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get dirPath => (super.noSuchMethod(
        Invocation.getter(#dirPath),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#dirPath),
        ),
        returnValueForMissingStub: _i25.dummyValue<String>(
          this,
          Invocation.getter(#dirPath),
        ),
      ) as String);

  @override
  set dirPath(String? _dirPath) => super.noSuchMethod(
        Invocation.setter(
          #dirPath,
          _dirPath,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i15.Future<_i21.MergeMultiplePDFResponse> exportPdf(
    _i29.Encounter? encounter,
    _i14.Patient? patient, {
    bool? saveToDocDir = false,
    String? locale = r'en',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportPdf,
          [
            encounter,
            patient,
          ],
          {
            #saveToDocDir: saveToDocDir,
            #locale: locale,
          },
        ),
        returnValue: _i15.Future<_i21.MergeMultiplePDFResponse>.value(
            _FakeMergeMultiplePDFResponse_22(
          this,
          Invocation.method(
            #exportPdf,
            [
              encounter,
              patient,
            ],
            {
              #saveToDocDir: saveToDocDir,
              #locale: locale,
            },
          ),
        )),
        returnValueForMissingStub:
            _i15.Future<_i21.MergeMultiplePDFResponse>.value(
                _FakeMergeMultiplePDFResponse_22(
          this,
          Invocation.method(
            #exportPdf,
            [
              encounter,
              patient,
            ],
            {
              #saveToDocDir: saveToDocDir,
              #locale: locale,
            },
          ),
        )),
      ) as _i15.Future<_i21.MergeMultiplePDFResponse>);
}

/// A class which mocks [FileSaverService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSaverService extends _i1.Mock implements _i49.FileSaverService {
  @override
  _i15.Future<_i22.ShareResult> saveAndShareFile(
    List<int>? bytes,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAndShareFile,
          [
            bytes,
            fileName,
          ],
        ),
        returnValue: _i15.Future<_i22.ShareResult>.value(_FakeShareResult_23(
          this,
          Invocation.method(
            #saveAndShareFile,
            [
              bytes,
              fileName,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i15.Future<_i22.ShareResult>.value(_FakeShareResult_23(
          this,
          Invocation.method(
            #saveAndShareFile,
            [
              bytes,
              fileName,
            ],
          ),
        )),
      ) as _i15.Future<_i22.ShareResult>);
}

/// A class which mocks [AppLocaleService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLocaleService extends _i1.Mock implements _i50.AppLocaleService {
  @override
  Map<String, Map<String, dynamic>> get translations => (super.noSuchMethod(
        Invocation.getter(#translations),
        returnValue: <String, Map<String, dynamic>>{},
        returnValueForMissingStub: <String, Map<String, dynamic>>{},
      ) as Map<String, Map<String, dynamic>>);

  @override
  set translations(Map<String, Map<String, dynamic>>? _translations) =>
      super.noSuchMethod(
        Invocation.setter(
          #translations,
          _translations,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Locale get locale => (super.noSuchMethod(
        Invocation.getter(#locale),
        returnValue: _FakeLocale_24(
          this,
          Invocation.getter(#locale),
        ),
        returnValueForMissingStub: _FakeLocale_24(
          this,
          Invocation.getter(#locale),
        ),
      ) as _i6.Locale);

  @override
  String get localeToAppend => (super.noSuchMethod(
        Invocation.getter(#localeToAppend),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.getter(#localeToAppend),
        ),
        returnValueForMissingStub: _i25.dummyValue<String>(
          this,
          Invocation.getter(#localeToAppend),
        ),
      ) as String);

  @override
  _i6.Locale get systemLocale => (super.noSuchMethod(
        Invocation.getter(#systemLocale),
        returnValue: _FakeLocale_24(
          this,
          Invocation.getter(#systemLocale),
        ),
        returnValueForMissingStub: _FakeLocale_24(
          this,
          Invocation.getter(#systemLocale),
        ),
      ) as _i6.Locale);

  @override
  set systemLocale(_i6.Locale? locale) => super.noSuchMethod(
        Invocation.setter(
          #systemLocale,
          locale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void loadTranslations() => super.noSuchMethod(
        Invocation.method(
          #loadTranslations,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String tr(
    _i6.Locale? locale,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #tr,
          [
            locale,
            key,
          ],
        ),
        returnValue: _i25.dummyValue<String>(
          this,
          Invocation.method(
            #tr,
            [
              locale,
              key,
            ],
          ),
        ),
        returnValueForMissingStub: _i25.dummyValue<String>(
          this,
          Invocation.method(
            #tr,
            [
              locale,
              key,
            ],
          ),
        ),
      ) as String);

  @override
  void changeLocale(_i6.Locale? newLocale) => super.noSuchMethod(
        Invocation.method(
          #changeLocale,
          [newLocale],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetLocaleToDefaultSystemLocale() => super.noSuchMethod(
        Invocation.method(
          #resetLocaleToDefaultSystemLocale,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LoggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerService extends _i1.Mock implements _i51.LoggerService {
  @override
  _i23.Logger getLogger(
    String? className, {
    bool? printCallingFunctionName = true,
    bool? printCallstack = false,
    List<String>? exludeLogsFromClasses = const [],
    String? showOnlyClass,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLogger,
          [className],
          {
            #printCallingFunctionName: printCallingFunctionName,
            #printCallstack: printCallstack,
            #exludeLogsFromClasses: exludeLogsFromClasses,
            #showOnlyClass: showOnlyClass,
          },
        ),
        returnValue: _FakeLogger_25(
          this,
          Invocation.method(
            #getLogger,
            [className],
            {
              #printCallingFunctionName: printCallingFunctionName,
              #printCallstack: printCallstack,
              #exludeLogsFromClasses: exludeLogsFromClasses,
              #showOnlyClass: showOnlyClass,
            },
          ),
        ),
        returnValueForMissingStub: _FakeLogger_25(
          this,
          Invocation.method(
            #getLogger,
            [className],
            {
              #printCallingFunctionName: printCallingFunctionName,
              #printCallstack: printCallstack,
              #exludeLogsFromClasses: exludeLogsFromClasses,
              #showOnlyClass: showOnlyClass,
            },
          ),
        ),
      ) as _i23.Logger);
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i52.AnalyticsService {
  @override
  _i24.FirebaseAnalyticsObserver getAnalyticsObserver() => (super.noSuchMethod(
        Invocation.method(
          #getAnalyticsObserver,
          [],
        ),
        returnValue: _FakeFirebaseAnalyticsObserver_26(
          this,
          Invocation.method(
            #getAnalyticsObserver,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeFirebaseAnalyticsObserver_26(
          this,
          Invocation.method(
            #getAnalyticsObserver,
            [],
          ),
        ),
      ) as _i24.FirebaseAnalyticsObserver);

  @override
  _i15.Future<dynamic> logScreen({required String? name}) =>
      (super.noSuchMethod(
        Invocation.method(
          #logScreen,
          [],
          {#name: name},
        ),
        returnValue: _i15.Future<dynamic>.value(),
        returnValueForMissingStub: _i15.Future<dynamic>.value(),
      ) as _i15.Future<dynamic>);

  @override
  _i15.Future<dynamic> logLogin() => (super.noSuchMethod(
        Invocation.method(
          #logLogin,
          [],
        ),
        returnValue: _i15.Future<dynamic>.value(),
        returnValueForMissingStub: _i15.Future<dynamic>.value(),
      ) as _i15.Future<dynamic>);

  @override
  _i15.Future<dynamic> logLogout() => (super.noSuchMethod(
        Invocation.method(
          #logLogout,
          [],
        ),
        returnValue: _i15.Future<dynamic>.value(),
        returnValueForMissingStub: _i15.Future<dynamic>.value(),
      ) as _i15.Future<dynamic>);

  @override
  _i15.Future<dynamic> logEpisodeUploadFail() => (super.noSuchMethod(
        Invocation.method(
          #logEpisodeUploadFail,
          [],
        ),
        returnValue: _i15.Future<dynamic>.value(),
        returnValueForMissingStub: _i15.Future<dynamic>.value(),
      ) as _i15.Future<dynamic>);
}
